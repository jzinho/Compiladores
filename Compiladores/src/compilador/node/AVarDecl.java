/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.node;

import compilador.analysis.*;

@SuppressWarnings("nls")
public final class AVarDecl extends PVarDecl
{
    private PTypeDecl _typeDecl_;
    private TTId _tId_;

    public AVarDecl()
    {
        // Constructor
    }

    public AVarDecl(
        @SuppressWarnings("hiding") PTypeDecl _typeDecl_,
        @SuppressWarnings("hiding") TTId _tId_)
    {
        // Constructor
        setTypeDecl(_typeDecl_);

        setTId(_tId_);

    }

    @Override
    public Object clone()
    {
        return new AVarDecl(
            cloneNode(this._typeDecl_),
            cloneNode(this._tId_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAVarDecl(this);
    }

    public PTypeDecl getTypeDecl()
    {
        return this._typeDecl_;
    }

    public void setTypeDecl(PTypeDecl node)
    {
        if(this._typeDecl_ != null)
        {
            this._typeDecl_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._typeDecl_ = node;
    }

    public TTId getTId()
    {
        return this._tId_;
    }

    public void setTId(TTId node)
    {
        if(this._tId_ != null)
        {
            this._tId_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tId_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._typeDecl_)
            + toString(this._tId_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._typeDecl_ == child)
        {
            this._typeDecl_ = null;
            return;
        }

        if(this._tId_ == child)
        {
            this._tId_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._typeDecl_ == oldChild)
        {
            setTypeDecl((PTypeDecl) newChild);
            return;
        }

        if(this._tId_ == oldChild)
        {
            setTId((TTId) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
