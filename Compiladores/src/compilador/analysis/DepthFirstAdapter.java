/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.analysis;

import java.util.*;
import compilador.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProgram().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        if(node.getDeclList() != null)
        {
            node.getDeclList().apply(this);
        }
        outAProgram(node);
    }

    public void inASequenceDeclList(ASequenceDeclList node)
    {
        defaultIn(node);
    }

    public void outASequenceDeclList(ASequenceDeclList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASequenceDeclList(ASequenceDeclList node)
    {
        inASequenceDeclList(node);
        if(node.getDeclList() != null)
        {
            node.getDeclList().apply(this);
        }
        if(node.getDecl() != null)
        {
            node.getDecl().apply(this);
        }
        outASequenceDeclList(node);
    }

    public void inASingleDeclList(ASingleDeclList node)
    {
        defaultIn(node);
    }

    public void outASingleDeclList(ASingleDeclList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleDeclList(ASingleDeclList node)
    {
        inASingleDeclList(node);
        if(node.getDecl() != null)
        {
            node.getDecl().apply(this);
        }
        outASingleDeclList(node);
    }

    public void inAVariableDecl(AVariableDecl node)
    {
        defaultIn(node);
    }

    public void outAVariableDecl(AVariableDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableDecl(AVariableDecl node)
    {
        inAVariableDecl(node);
        if(node.getVarDecl() != null)
        {
            node.getVarDecl().apply(this);
        }
        outAVariableDecl(node);
    }

    public void inAFunctionDecl(AFunctionDecl node)
    {
        defaultIn(node);
    }

    public void outAFunctionDecl(AFunctionDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionDecl(AFunctionDecl node)
    {
        inAFunctionDecl(node);
        if(node.getFunDecl() != null)
        {
            node.getFunDecl().apply(this);
        }
        outAFunctionDecl(node);
    }

    public void inASingleVarDecl(ASingleVarDecl node)
    {
        defaultIn(node);
    }

    public void outASingleVarDecl(ASingleVarDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleVarDecl(ASingleVarDecl node)
    {
        inASingleVarDecl(node);
        if(node.getTypeDecl() != null)
        {
            node.getTypeDecl().apply(this);
        }
        if(node.getTId() != null)
        {
            node.getTId().apply(this);
        }
        if(node.getScolon() != null)
        {
            node.getScolon().apply(this);
        }
        outASingleVarDecl(node);
    }

    public void inACompVarDecl(ACompVarDecl node)
    {
        defaultIn(node);
    }

    public void outACompVarDecl(ACompVarDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACompVarDecl(ACompVarDecl node)
    {
        inACompVarDecl(node);
        if(node.getTypeDecl() != null)
        {
            node.getTypeDecl().apply(this);
        }
        if(node.getTId() != null)
        {
            node.getTId().apply(this);
        }
        if(node.getLsbrack() != null)
        {
            node.getLsbrack().apply(this);
        }
        if(node.getIntegerNumber() != null)
        {
            node.getIntegerNumber().apply(this);
        }
        if(node.getRsbrack() != null)
        {
            node.getRsbrack().apply(this);
        }
        if(node.getScolon() != null)
        {
            node.getScolon().apply(this);
        }
        outACompVarDecl(node);
    }

    public void inAValTypeDecl(AValTypeDecl node)
    {
        defaultIn(node);
    }

    public void outAValTypeDecl(AValTypeDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValTypeDecl(AValTypeDecl node)
    {
        inAValTypeDecl(node);
        if(node.getTypeValored() != null)
        {
            node.getTypeValored().apply(this);
        }
        outAValTypeDecl(node);
    }

    public void inANotTypeDecl(ANotTypeDecl node)
    {
        defaultIn(node);
    }

    public void outANotTypeDecl(ANotTypeDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotTypeDecl(ANotTypeDecl node)
    {
        inANotTypeDecl(node);
        if(node.getTypeNot() != null)
        {
            node.getTypeNot().apply(this);
        }
        outANotTypeDecl(node);
    }

    public void inAIntTypeValored(AIntTypeValored node)
    {
        defaultIn(node);
    }

    public void outAIntTypeValored(AIntTypeValored node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntTypeValored(AIntTypeValored node)
    {
        inAIntTypeValored(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntTypeValored(node);
    }

    public void inAStringTypeValored(AStringTypeValored node)
    {
        defaultIn(node);
    }

    public void outAStringTypeValored(AStringTypeValored node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringTypeValored(AStringTypeValored node)
    {
        inAStringTypeValored(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringTypeValored(node);
    }

    public void inATypeNot(ATypeNot node)
    {
        defaultIn(node);
    }

    public void outATypeNot(ATypeNot node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeNot(ATypeNot node)
    {
        inATypeNot(node);
        if(node.getVoid() != null)
        {
            node.getVoid().apply(this);
        }
        outATypeNot(node);
    }

    public void inAFunDecl(AFunDecl node)
    {
        defaultIn(node);
    }

    public void outAFunDecl(AFunDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunDecl(AFunDecl node)
    {
        inAFunDecl(node);
        if(node.getTypeDecl() != null)
        {
            node.getTypeDecl().apply(this);
        }
        if(node.getTId() != null)
        {
            node.getTId().apply(this);
        }
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        if(node.getParams() != null)
        {
            node.getParams().apply(this);
        }
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAFunDecl(node);
    }

    public void inAPListParams(APListParams node)
    {
        defaultIn(node);
    }

    public void outAPListParams(APListParams node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPListParams(APListParams node)
    {
        inAPListParams(node);
        if(node.getParamList() != null)
        {
            node.getParamList().apply(this);
        }
        outAPListParams(node);
    }

    public void inAVoidParams(AVoidParams node)
    {
        defaultIn(node);
    }

    public void outAVoidParams(AVoidParams node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVoidParams(AVoidParams node)
    {
        inAVoidParams(node);
        if(node.getVoid() != null)
        {
            node.getVoid().apply(this);
        }
        outAVoidParams(node);
    }

    public void inACompParamList(ACompParamList node)
    {
        defaultIn(node);
    }

    public void outACompParamList(ACompParamList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACompParamList(ACompParamList node)
    {
        inACompParamList(node);
        if(node.getParamList() != null)
        {
            node.getParamList().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getParam() != null)
        {
            node.getParam().apply(this);
        }
        outACompParamList(node);
    }

    public void inASingleParamList(ASingleParamList node)
    {
        defaultIn(node);
    }

    public void outASingleParamList(ASingleParamList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleParamList(ASingleParamList node)
    {
        inASingleParamList(node);
        if(node.getParam() != null)
        {
            node.getParam().apply(this);
        }
        outASingleParamList(node);
    }

    public void inANormalParam(ANormalParam node)
    {
        defaultIn(node);
    }

    public void outANormalParam(ANormalParam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANormalParam(ANormalParam node)
    {
        inANormalParam(node);
        if(node.getTypeDecl() != null)
        {
            node.getTypeDecl().apply(this);
        }
        if(node.getTId() != null)
        {
            node.getTId().apply(this);
        }
        outANormalParam(node);
    }

    public void inABracksParam(ABracksParam node)
    {
        defaultIn(node);
    }

    public void outABracksParam(ABracksParam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABracksParam(ABracksParam node)
    {
        inABracksParam(node);
        if(node.getTypeDecl() != null)
        {
            node.getTypeDecl().apply(this);
        }
        if(node.getTId() != null)
        {
            node.getTId().apply(this);
        }
        if(node.getLsbrack() != null)
        {
            node.getLsbrack().apply(this);
        }
        if(node.getRsbrack() != null)
        {
            node.getRsbrack().apply(this);
        }
        outABracksParam(node);
    }

    public void inACompoundStmt(ACompoundStmt node)
    {
        defaultIn(node);
    }

    public void outACompoundStmt(ACompoundStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACompoundStmt(ACompoundStmt node)
    {
        inACompoundStmt(node);
        if(node.getOpenBrace() != null)
        {
            node.getOpenBrace().apply(this);
        }
        if(node.getLocalDeclaration() != null)
        {
            node.getLocalDeclaration().apply(this);
        }
        if(node.getStatementList() != null)
        {
            node.getStatementList().apply(this);
        }
        if(node.getCloseBrace() != null)
        {
            node.getCloseBrace().apply(this);
        }
        outACompoundStmt(node);
    }

    public void inAExpressionStatement(AExpressionStatement node)
    {
        defaultIn(node);
    }

    public void outAExpressionStatement(AExpressionStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionStatement(AExpressionStatement node)
    {
        inAExpressionStatement(node);
        if(node.getExpressionStmt() != null)
        {
            node.getExpressionStmt().apply(this);
        }
        outAExpressionStatement(node);
    }

    public void inACompoundStatement(ACompoundStatement node)
    {
        defaultIn(node);
    }

    public void outACompoundStatement(ACompoundStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACompoundStatement(ACompoundStatement node)
    {
        inACompoundStatement(node);
        if(node.getCompoundStmt() != null)
        {
            node.getCompoundStmt().apply(this);
        }
        outACompoundStatement(node);
    }

    public void inASelectionStatement(ASelectionStatement node)
    {
        defaultIn(node);
    }

    public void outASelectionStatement(ASelectionStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASelectionStatement(ASelectionStatement node)
    {
        inASelectionStatement(node);
        if(node.getSelectionStmt() != null)
        {
            node.getSelectionStmt().apply(this);
        }
        outASelectionStatement(node);
    }

    public void inAIterationStatement(AIterationStatement node)
    {
        defaultIn(node);
    }

    public void outAIterationStatement(AIterationStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIterationStatement(AIterationStatement node)
    {
        inAIterationStatement(node);
        if(node.getIterationStmt() != null)
        {
            node.getIterationStmt().apply(this);
        }
        outAIterationStatement(node);
    }

    public void inAReturnStatement(AReturnStatement node)
    {
        defaultIn(node);
    }

    public void outAReturnStatement(AReturnStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnStatement(AReturnStatement node)
    {
        inAReturnStatement(node);
        if(node.getReturnStmt() != null)
        {
            node.getReturnStmt().apply(this);
        }
        outAReturnStatement(node);
    }

    public void inASelseStatementElse(ASelseStatementElse node)
    {
        defaultIn(node);
    }

    public void outASelseStatementElse(ASelseStatementElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASelseStatementElse(ASelseStatementElse node)
    {
        inASelseStatementElse(node);
        if(node.getSelectionStmtElse() != null)
        {
            node.getSelectionStmtElse().apply(this);
        }
        outASelseStatementElse(node);
    }

    public void inAExpressionStatementElse(AExpressionStatementElse node)
    {
        defaultIn(node);
    }

    public void outAExpressionStatementElse(AExpressionStatementElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionStatementElse(AExpressionStatementElse node)
    {
        inAExpressionStatementElse(node);
        if(node.getExpressionStmt() != null)
        {
            node.getExpressionStmt().apply(this);
        }
        outAExpressionStatementElse(node);
    }

    public void inACompoundStatementElse(ACompoundStatementElse node)
    {
        defaultIn(node);
    }

    public void outACompoundStatementElse(ACompoundStatementElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACompoundStatementElse(ACompoundStatementElse node)
    {
        inACompoundStatementElse(node);
        if(node.getCompoundStmt() != null)
        {
            node.getCompoundStmt().apply(this);
        }
        outACompoundStatementElse(node);
    }

    public void inAIterationStatementElse(AIterationStatementElse node)
    {
        defaultIn(node);
    }

    public void outAIterationStatementElse(AIterationStatementElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIterationStatementElse(AIterationStatementElse node)
    {
        inAIterationStatementElse(node);
        if(node.getIterationElse() != null)
        {
            node.getIterationElse().apply(this);
        }
        outAIterationStatementElse(node);
    }

    public void inAReturnStatementElse(AReturnStatementElse node)
    {
        defaultIn(node);
    }

    public void outAReturnStatementElse(AReturnStatementElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnStatementElse(AReturnStatementElse node)
    {
        inAReturnStatementElse(node);
        if(node.getReturnStmt() != null)
        {
            node.getReturnStmt().apply(this);
        }
        outAReturnStatementElse(node);
    }

    public void inAExpressionStmt(AExpressionStmt node)
    {
        defaultIn(node);
    }

    public void outAExpressionStmt(AExpressionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionStmt(AExpressionStmt node)
    {
        inAExpressionStmt(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getScolon() != null)
        {
            node.getScolon().apply(this);
        }
        outAExpressionStmt(node);
    }

    public void inAScolonExpressionStmt(AScolonExpressionStmt node)
    {
        defaultIn(node);
    }

    public void outAScolonExpressionStmt(AScolonExpressionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAScolonExpressionStmt(AScolonExpressionStmt node)
    {
        inAScolonExpressionStmt(node);
        if(node.getScolon() != null)
        {
            node.getScolon().apply(this);
        }
        outAScolonExpressionStmt(node);
    }

    public void inAStatementList(AStatementList node)
    {
        defaultIn(node);
    }

    public void outAStatementList(AStatementList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStatementList(AStatementList node)
    {
        inAStatementList(node);
        if(node.getStatementList() != null)
        {
            node.getStatementList().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAStatementList(node);
    }

    public void inAEmptyStatementList(AEmptyStatementList node)
    {
        defaultIn(node);
    }

    public void outAEmptyStatementList(AEmptyStatementList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyStatementList(AEmptyStatementList node)
    {
        inAEmptyStatementList(node);
        outAEmptyStatementList(node);
    }

    public void inAIfSelectionStmt(AIfSelectionStmt node)
    {
        defaultIn(node);
    }

    public void outAIfSelectionStmt(AIfSelectionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfSelectionStmt(AIfSelectionStmt node)
    {
        inAIfSelectionStmt(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        if(node.getSimpleExpression() != null)
        {
            node.getSimpleExpression().apply(this);
        }
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAIfSelectionStmt(node);
    }

    public void inAIfelseSelectionStmt(AIfelseSelectionStmt node)
    {
        defaultIn(node);
    }

    public void outAIfelseSelectionStmt(AIfelseSelectionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfelseSelectionStmt(AIfelseSelectionStmt node)
    {
        inAIfelseSelectionStmt(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        if(node.getSimpleExpression() != null)
        {
            node.getSimpleExpression().apply(this);
        }
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        if(node.getStatementElse() != null)
        {
            node.getStatementElse().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAIfelseSelectionStmt(node);
    }

    public void inAIfelseSelectionStmtElse(AIfelseSelectionStmtElse node)
    {
        defaultIn(node);
    }

    public void outAIfelseSelectionStmtElse(AIfelseSelectionStmtElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfelseSelectionStmtElse(AIfelseSelectionStmtElse node)
    {
        inAIfelseSelectionStmtElse(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        if(node.getSimpleExpression() != null)
        {
            node.getSimpleExpression().apply(this);
        }
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        if(node.getStatementElse() != null)
        {
            node.getStatementElse().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getStatementElse2() != null)
        {
            node.getStatementElse2().apply(this);
        }
        outAIfelseSelectionStmtElse(node);
    }

    public void inAStatementElse2(AStatementElse2 node)
    {
        defaultIn(node);
    }

    public void outAStatementElse2(AStatementElse2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStatementElse2(AStatementElse2 node)
    {
        inAStatementElse2(node);
        if(node.getStatementElse() != null)
        {
            node.getStatementElse().apply(this);
        }
        outAStatementElse2(node);
    }

    public void inAElseIterationStmt(AElseIterationStmt node)
    {
        defaultIn(node);
    }

    public void outAElseIterationStmt(AElseIterationStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElseIterationStmt(AElseIterationStmt node)
    {
        inAElseIterationStmt(node);
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        if(node.getSimpleExpression() != null)
        {
            node.getSimpleExpression().apply(this);
        }
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAElseIterationStmt(node);
    }

    public void inANoelseIterationElse(ANoelseIterationElse node)
    {
        defaultIn(node);
    }

    public void outANoelseIterationElse(ANoelseIterationElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoelseIterationElse(ANoelseIterationElse node)
    {
        inANoelseIterationElse(node);
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        if(node.getSimpleExpression() != null)
        {
            node.getSimpleExpression().apply(this);
        }
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        if(node.getStatementElse() != null)
        {
            node.getStatementElse().apply(this);
        }
        outANoelseIterationElse(node);
    }

    public void inAReturn1ReturnStmt(AReturn1ReturnStmt node)
    {
        defaultIn(node);
    }

    public void outAReturn1ReturnStmt(AReturn1ReturnStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturn1ReturnStmt(AReturn1ReturnStmt node)
    {
        inAReturn1ReturnStmt(node);
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getScolon() != null)
        {
            node.getScolon().apply(this);
        }
        outAReturn1ReturnStmt(node);
    }

    public void inAReturn2ReturnStmt(AReturn2ReturnStmt node)
    {
        defaultIn(node);
    }

    public void outAReturn2ReturnStmt(AReturn2ReturnStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturn2ReturnStmt(AReturn2ReturnStmt node)
    {
        inAReturn2ReturnStmt(node);
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getScolon() != null)
        {
            node.getScolon().apply(this);
        }
        outAReturn2ReturnStmt(node);
    }

    public void inAComparationExpression(AComparationExpression node)
    {
        defaultIn(node);
    }

    public void outAComparationExpression(AComparationExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComparationExpression(AComparationExpression node)
    {
        inAComparationExpression(node);
        if(node.getMutable() != null)
        {
            node.getMutable().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAComparationExpression(node);
    }

    public void inAAddExpression(AAddExpression node)
    {
        defaultIn(node);
    }

    public void outAAddExpression(AAddExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddExpression(AAddExpression node)
    {
        inAAddExpression(node);
        if(node.getSimpleExpression() != null)
        {
            node.getSimpleExpression().apply(this);
        }
        outAAddExpression(node);
    }

    public void inALocalDeclaration(ALocalDeclaration node)
    {
        defaultIn(node);
    }

    public void outALocalDeclaration(ALocalDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALocalDeclaration(ALocalDeclaration node)
    {
        inALocalDeclaration(node);
        if(node.getLocalDeclaration() != null)
        {
            node.getLocalDeclaration().apply(this);
        }
        if(node.getVarDecl() != null)
        {
            node.getVarDecl().apply(this);
        }
        outALocalDeclaration(node);
    }

    public void inAEmptyLocalDeclaration(AEmptyLocalDeclaration node)
    {
        defaultIn(node);
    }

    public void outAEmptyLocalDeclaration(AEmptyLocalDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyLocalDeclaration(AEmptyLocalDeclaration node)
    {
        inAEmptyLocalDeclaration(node);
        outAEmptyLocalDeclaration(node);
    }

    public void inAA1SimpleExpression(AA1SimpleExpression node)
    {
        defaultIn(node);
    }

    public void outAA1SimpleExpression(AA1SimpleExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAA1SimpleExpression(AA1SimpleExpression node)
    {
        inAA1SimpleExpression(node);
        if(node.getAddExp() != null)
        {
            node.getAddExp().apply(this);
        }
        if(node.getRelOp() != null)
        {
            node.getRelOp().apply(this);
        }
        if(node.getAddExp2() != null)
        {
            node.getAddExp2().apply(this);
        }
        outAA1SimpleExpression(node);
    }

    public void inASingleSimpleExpression(ASingleSimpleExpression node)
    {
        defaultIn(node);
    }

    public void outASingleSimpleExpression(ASingleSimpleExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleSimpleExpression(ASingleSimpleExpression node)
    {
        inASingleSimpleExpression(node);
        if(node.getAddExp() != null)
        {
            node.getAddExp().apply(this);
        }
        outASingleSimpleExpression(node);
    }

    public void inAAddExp2(AAddExp2 node)
    {
        defaultIn(node);
    }

    public void outAAddExp2(AAddExp2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddExp2(AAddExp2 node)
    {
        inAAddExp2(node);
        if(node.getAddExp() != null)
        {
            node.getAddExp().apply(this);
        }
        outAAddExp2(node);
    }

    public void inAAddtermAddExp(AAddtermAddExp node)
    {
        defaultIn(node);
    }

    public void outAAddtermAddExp(AAddtermAddExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddtermAddExp(AAddtermAddExp node)
    {
        inAAddtermAddExp(node);
        if(node.getAddExp() != null)
        {
            node.getAddExp().apply(this);
        }
        if(node.getAddOp() != null)
        {
            node.getAddOp().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAAddtermAddExp(node);
    }

    public void inATermAddExp(ATermAddExp node)
    {
        defaultIn(node);
    }

    public void outATermAddExp(ATermAddExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermAddExp(ATermAddExp node)
    {
        inATermAddExp(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outATermAddExp(node);
    }

    public void inATermfactorTerm(ATermfactorTerm node)
    {
        defaultIn(node);
    }

    public void outATermfactorTerm(ATermfactorTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermfactorTerm(ATermfactorTerm node)
    {
        inATermfactorTerm(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getMultOp() != null)
        {
            node.getMultOp().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outATermfactorTerm(node);
    }

    public void inAFactorTerm(AFactorTerm node)
    {
        defaultIn(node);
    }

    public void outAFactorTerm(AFactorTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFactorTerm(AFactorTerm node)
    {
        inAFactorTerm(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAFactorTerm(node);
    }

    public void inAMulFactor(AMulFactor node)
    {
        defaultIn(node);
    }

    public void outAMulFactor(AMulFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMulFactor(AMulFactor node)
    {
        inAMulFactor(node);
        if(node.getMutable() != null)
        {
            node.getMutable().apply(this);
        }
        outAMulFactor(node);
    }

    public void inAImulFactor(AImulFactor node)
    {
        defaultIn(node);
    }

    public void outAImulFactor(AImulFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAImulFactor(AImulFactor node)
    {
        inAImulFactor(node);
        if(node.getImmutable() != null)
        {
            node.getImmutable().apply(this);
        }
        outAImulFactor(node);
    }

    public void inASingleMutable(ASingleMutable node)
    {
        defaultIn(node);
    }

    public void outASingleMutable(ASingleMutable node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleMutable(ASingleMutable node)
    {
        inASingleMutable(node);
        if(node.getTId() != null)
        {
            node.getTId().apply(this);
        }
        outASingleMutable(node);
    }

    public void inAIdexpressionMutable(AIdexpressionMutable node)
    {
        defaultIn(node);
    }

    public void outAIdexpressionMutable(AIdexpressionMutable node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdexpressionMutable(AIdexpressionMutable node)
    {
        inAIdexpressionMutable(node);
        if(node.getTId() != null)
        {
            node.getTId().apply(this);
        }
        if(node.getLsbrack() != null)
        {
            node.getLsbrack().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getRsbrack() != null)
        {
            node.getRsbrack().apply(this);
        }
        outAIdexpressionMutable(node);
    }

    public void inANumberMutable(ANumberMutable node)
    {
        defaultIn(node);
    }

    public void outANumberMutable(ANumberMutable node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberMutable(ANumberMutable node)
    {
        inANumberMutable(node);
        if(node.getIntegerNumber() != null)
        {
            node.getIntegerNumber().apply(this);
        }
        outANumberMutable(node);
    }

    public void inAExpressionImmutable(AExpressionImmutable node)
    {
        defaultIn(node);
    }

    public void outAExpressionImmutable(AExpressionImmutable node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionImmutable(AExpressionImmutable node)
    {
        inAExpressionImmutable(node);
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        outAExpressionImmutable(node);
    }

    public void inACallImmutable(ACallImmutable node)
    {
        defaultIn(node);
    }

    public void outACallImmutable(ACallImmutable node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallImmutable(ACallImmutable node)
    {
        inACallImmutable(node);
        if(node.getCall() != null)
        {
            node.getCall().apply(this);
        }
        outACallImmutable(node);
    }

    public void inANumImmutable(ANumImmutable node)
    {
        defaultIn(node);
    }

    public void outANumImmutable(ANumImmutable node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumImmutable(ANumImmutable node)
    {
        inANumImmutable(node);
        if(node.getTNum() != null)
        {
            node.getTNum().apply(this);
        }
        outANumImmutable(node);
    }

    public void inACall(ACall node)
    {
        defaultIn(node);
    }

    public void outACall(ACall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACall(ACall node)
    {
        inACall(node);
        if(node.getTId() != null)
        {
            node.getTId().apply(this);
        }
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        if(node.getArgs() != null)
        {
            node.getArgs().apply(this);
        }
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        outACall(node);
    }

    public void inAArgs(AArgs node)
    {
        defaultIn(node);
    }

    public void outAArgs(AArgs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArgs(AArgs node)
    {
        inAArgs(node);
        if(node.getArgsList() != null)
        {
            node.getArgsList().apply(this);
        }
        outAArgs(node);
    }

    public void inAEmptyArgs(AEmptyArgs node)
    {
        defaultIn(node);
    }

    public void outAEmptyArgs(AEmptyArgs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyArgs(AEmptyArgs node)
    {
        inAEmptyArgs(node);
        outAEmptyArgs(node);
    }

    public void inAListargsArgsList(AListargsArgsList node)
    {
        defaultIn(node);
    }

    public void outAListargsArgsList(AListargsArgsList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListargsArgsList(AListargsArgsList node)
    {
        inAListargsArgsList(node);
        if(node.getArgsList() != null)
        {
            node.getArgsList().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAListargsArgsList(node);
    }

    public void inAExpressionArgsList(AExpressionArgsList node)
    {
        defaultIn(node);
    }

    public void outAExpressionArgsList(AExpressionArgsList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionArgsList(AExpressionArgsList node)
    {
        inAExpressionArgsList(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAExpressionArgsList(node);
    }

    public void inADiffRelOp(ADiffRelOp node)
    {
        defaultIn(node);
    }

    public void outADiffRelOp(ADiffRelOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADiffRelOp(ADiffRelOp node)
    {
        inADiffRelOp(node);
        if(node.getDiff() != null)
        {
            node.getDiff().apply(this);
        }
        outADiffRelOp(node);
    }

    public void inAEqualRelOp(AEqualRelOp node)
    {
        defaultIn(node);
    }

    public void outAEqualRelOp(AEqualRelOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualRelOp(AEqualRelOp node)
    {
        inAEqualRelOp(node);
        if(node.getEqualequal() != null)
        {
            node.getEqualequal().apply(this);
        }
        outAEqualRelOp(node);
    }

    public void inAGreaterRelOp(AGreaterRelOp node)
    {
        defaultIn(node);
    }

    public void outAGreaterRelOp(AGreaterRelOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterRelOp(AGreaterRelOp node)
    {
        inAGreaterRelOp(node);
        if(node.getGreater() != null)
        {
            node.getGreater().apply(this);
        }
        outAGreaterRelOp(node);
    }

    public void inALessRelOp(ALessRelOp node)
    {
        defaultIn(node);
    }

    public void outALessRelOp(ALessRelOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessRelOp(ALessRelOp node)
    {
        inALessRelOp(node);
        if(node.getLess() != null)
        {
            node.getLess().apply(this);
        }
        outALessRelOp(node);
    }

    public void inAGequalRelOp(AGequalRelOp node)
    {
        defaultIn(node);
    }

    public void outAGequalRelOp(AGequalRelOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGequalRelOp(AGequalRelOp node)
    {
        inAGequalRelOp(node);
        if(node.getGequal() != null)
        {
            node.getGequal().apply(this);
        }
        outAGequalRelOp(node);
    }

    public void inALequalRelOp(ALequalRelOp node)
    {
        defaultIn(node);
    }

    public void outALequalRelOp(ALequalRelOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALequalRelOp(ALequalRelOp node)
    {
        inALequalRelOp(node);
        if(node.getLequal() != null)
        {
            node.getLequal().apply(this);
        }
        outALequalRelOp(node);
    }

    public void inAPlusAddOp(APlusAddOp node)
    {
        defaultIn(node);
    }

    public void outAPlusAddOp(APlusAddOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusAddOp(APlusAddOp node)
    {
        inAPlusAddOp(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAPlusAddOp(node);
    }

    public void inAMinusAddOp(AMinusAddOp node)
    {
        defaultIn(node);
    }

    public void outAMinusAddOp(AMinusAddOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusAddOp(AMinusAddOp node)
    {
        inAMinusAddOp(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusAddOp(node);
    }

    public void inATimesMultOp(ATimesMultOp node)
    {
        defaultIn(node);
    }

    public void outATimesMultOp(ATimesMultOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATimesMultOp(ATimesMultOp node)
    {
        inATimesMultOp(node);
        if(node.getTimes() != null)
        {
            node.getTimes().apply(this);
        }
        outATimesMultOp(node);
    }

    public void inADivMultOp(ADivMultOp node)
    {
        defaultIn(node);
    }

    public void outADivMultOp(ADivMultOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivMultOp(ADivMultOp node)
    {
        inADivMultOp(node);
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        outADivMultOp(node);
    }

    public void inAModMultOp(AModMultOp node)
    {
        defaultIn(node);
    }

    public void outAModMultOp(AModMultOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModMultOp(AModMultOp node)
    {
        inAModMultOp(node);
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        outAModMultOp(node);
    }
}
