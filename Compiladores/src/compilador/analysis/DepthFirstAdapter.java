/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.analysis;

import java.util.*;
import compilador.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProgram().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inADeclListProgram(ADeclListProgram node)
    {
        defaultIn(node);
    }

    public void outADeclListProgram(ADeclListProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclListProgram(ADeclListProgram node)
    {
        inADeclListProgram(node);
        if(node.getDeclList() != null)
        {
            node.getDeclList().apply(this);
        }
        outADeclListProgram(node);
    }

    public void inADeclList(ADeclList node)
    {
        defaultIn(node);
    }

    public void outADeclList(ADeclList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclList(ADeclList node)
    {
        inADeclList(node);
        if(node.getDeclList() != null)
        {
            node.getDeclList().apply(this);
        }
        if(node.getDecl() != null)
        {
            node.getDecl().apply(this);
        }
        outADeclList(node);
    }

    public void inADeclDeclList(ADeclDeclList node)
    {
        defaultIn(node);
    }

    public void outADeclDeclList(ADeclDeclList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclDeclList(ADeclDeclList node)
    {
        inADeclDeclList(node);
        if(node.getDecl() != null)
        {
            node.getDecl().apply(this);
        }
        outADeclDeclList(node);
    }

    public void inAVarDeclDecl(AVarDeclDecl node)
    {
        defaultIn(node);
    }

    public void outAVarDeclDecl(AVarDeclDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDeclDecl(AVarDeclDecl node)
    {
        inAVarDeclDecl(node);
        if(node.getVarDecl() != null)
        {
            node.getVarDecl().apply(this);
        }
        outAVarDeclDecl(node);
    }

    public void inAFunDeclDecl(AFunDeclDecl node)
    {
        defaultIn(node);
    }

    public void outAFunDeclDecl(AFunDeclDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunDeclDecl(AFunDeclDecl node)
    {
        inAFunDeclDecl(node);
        if(node.getFunDecl() != null)
        {
            node.getFunDecl().apply(this);
        }
        outAFunDeclDecl(node);
    }

    public void inAVarDecl(AVarDecl node)
    {
        defaultIn(node);
    }

    public void outAVarDecl(AVarDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDecl(AVarDecl node)
    {
        inAVarDecl(node);
        if(node.getTypeDecl() != null)
        {
            node.getTypeDecl().apply(this);
        }
        if(node.getVarDeclId() != null)
        {
            node.getVarDeclId().apply(this);
        }
        outAVarDecl(node);
    }

    public void inAIntTypeDecl(AIntTypeDecl node)
    {
        defaultIn(node);
    }

    public void outAIntTypeDecl(AIntTypeDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntTypeDecl(AIntTypeDecl node)
    {
        inAIntTypeDecl(node);
        if(node.getIntegerNumber() != null)
        {
            node.getIntegerNumber().apply(this);
        }
        outAIntTypeDecl(node);
    }

    public void inAVoidTypeDecl(AVoidTypeDecl node)
    {
        defaultIn(node);
    }

    public void outAVoidTypeDecl(AVoidTypeDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVoidTypeDecl(AVoidTypeDecl node)
    {
        inAVoidTypeDecl(node);
        if(node.getVoid() != null)
        {
            node.getVoid().apply(this);
        }
        outAVoidTypeDecl(node);
    }

    public void inATIdVarDeclId(ATIdVarDeclId node)
    {
        defaultIn(node);
    }

    public void outATIdVarDeclId(ATIdVarDeclId node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATIdVarDeclId(ATIdVarDeclId node)
    {
        inATIdVarDeclId(node);
        if(node.getTId() != null)
        {
            node.getTId().apply(this);
        }
        outATIdVarDeclId(node);
    }

    public void inAVarDecl2VarDeclId(AVarDecl2VarDeclId node)
    {
        defaultIn(node);
    }

    public void outAVarDecl2VarDeclId(AVarDecl2VarDeclId node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDecl2VarDeclId(AVarDecl2VarDeclId node)
    {
        inAVarDecl2VarDeclId(node);
        if(node.getVarDecl2() != null)
        {
            node.getVarDecl2().apply(this);
        }
        outAVarDecl2VarDeclId(node);
    }

    public void inAVarDecl2(AVarDecl2 node)
    {
        defaultIn(node);
    }

    public void outAVarDecl2(AVarDecl2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDecl2(AVarDecl2 node)
    {
        inAVarDecl2(node);
        if(node.getTId() != null)
        {
            node.getTId().apply(this);
        }
        if(node.getLsbrack() != null)
        {
            node.getLsbrack().apply(this);
        }
        if(node.getTNum() != null)
        {
            node.getTNum().apply(this);
        }
        if(node.getRsbrack() != null)
        {
            node.getRsbrack().apply(this);
        }
        outAVarDecl2(node);
    }

    public void inAFunDecl(AFunDecl node)
    {
        defaultIn(node);
    }

    public void outAFunDecl(AFunDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunDecl(AFunDecl node)
    {
        inAFunDecl(node);
        if(node.getTNum() != null)
        {
            node.getTNum().apply(this);
        }
        outAFunDecl(node);
    }

    public void inADiffCompOp(ADiffCompOp node)
    {
        defaultIn(node);
    }

    public void outADiffCompOp(ADiffCompOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADiffCompOp(ADiffCompOp node)
    {
        inADiffCompOp(node);
        if(node.getDiff() != null)
        {
            node.getDiff().apply(this);
        }
        outADiffCompOp(node);
    }

    public void inAEqualCompOp(AEqualCompOp node)
    {
        defaultIn(node);
    }

    public void outAEqualCompOp(AEqualCompOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualCompOp(AEqualCompOp node)
    {
        inAEqualCompOp(node);
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        outAEqualCompOp(node);
    }

    public void inAGreaterCompOp(AGreaterCompOp node)
    {
        defaultIn(node);
    }

    public void outAGreaterCompOp(AGreaterCompOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterCompOp(AGreaterCompOp node)
    {
        inAGreaterCompOp(node);
        if(node.getGreater() != null)
        {
            node.getGreater().apply(this);
        }
        outAGreaterCompOp(node);
    }

    public void inALessCompOp(ALessCompOp node)
    {
        defaultIn(node);
    }

    public void outALessCompOp(ALessCompOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessCompOp(ALessCompOp node)
    {
        inALessCompOp(node);
        if(node.getLess() != null)
        {
            node.getLess().apply(this);
        }
        outALessCompOp(node);
    }

    public void inAGequalCompOp(AGequalCompOp node)
    {
        defaultIn(node);
    }

    public void outAGequalCompOp(AGequalCompOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGequalCompOp(AGequalCompOp node)
    {
        inAGequalCompOp(node);
        if(node.getGequal() != null)
        {
            node.getGequal().apply(this);
        }
        outAGequalCompOp(node);
    }

    public void inALequalCompOp(ALequalCompOp node)
    {
        defaultIn(node);
    }

    public void outALequalCompOp(ALequalCompOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALequalCompOp(ALequalCompOp node)
    {
        inALequalCompOp(node);
        if(node.getLequal() != null)
        {
            node.getLequal().apply(this);
        }
        outALequalCompOp(node);
    }

    public void inAPlusAddOp(APlusAddOp node)
    {
        defaultIn(node);
    }

    public void outAPlusAddOp(APlusAddOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusAddOp(APlusAddOp node)
    {
        inAPlusAddOp(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAPlusAddOp(node);
    }

    public void inAMinusAddOp(AMinusAddOp node)
    {
        defaultIn(node);
    }

    public void outAMinusAddOp(AMinusAddOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusAddOp(AMinusAddOp node)
    {
        inAMinusAddOp(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusAddOp(node);
    }

    public void inATimesMultOp(ATimesMultOp node)
    {
        defaultIn(node);
    }

    public void outATimesMultOp(ATimesMultOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATimesMultOp(ATimesMultOp node)
    {
        inATimesMultOp(node);
        if(node.getTimes() != null)
        {
            node.getTimes().apply(this);
        }
        outATimesMultOp(node);
    }

    public void inADivMultOp(ADivMultOp node)
    {
        defaultIn(node);
    }

    public void outADivMultOp(ADivMultOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivMultOp(ADivMultOp node)
    {
        inADivMultOp(node);
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        outADivMultOp(node);
    }
}
