/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.analysis;

import java.util.*;
import compilador.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunctionDecl(AFunctionDecl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMainFuncDecl(AMainFuncDecl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVariableDecl(AVariableDecl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunDeclDecl(AFunDeclDecl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntType(AIntType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStringType(AStringType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVoidType(AVoidType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclParamParam(ADeclParamParam node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParamVoidParam(AParamVoidParam node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASingleTypevar(ASingleTypevar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACompTypevar(ACompTypevar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEmptyComp(AEmptyComp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADimComp(ADimComp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStmtExprStatement(AStmtExprStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStmtReturnStatement(AStmtReturnStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStmtSelectIfStatement(AStmtSelectIfStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStmtSelectIfElseStatement(AStmtSelectIfElseStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACompStmtStatement(ACompStmtStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIterationStatement(AIterationStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACallStatement(ACallStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEmptyStatement(AEmptyStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAttExpression(AAttExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpArithExpression(AExpArithExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpLogicExpression(AExpLogicExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADiffExpLogic(ADiffExpLogic node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEqualequalExpLogic(AEqualequalExpLogic node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGreaterExpLogic(AGreaterExpLogic node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALessExpLogic(ALessExpLogic node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGequalExpLogic(AGequalExpLogic node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALequalExpLogic(ALequalExpLogic node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPlusExpArith(APlusExpArith node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMinusExpArith(AMinusExpArith node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATimesExpArith(ATimesExpArith node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADivExpArith(ADivExpArith node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAModExpArith(AModExpArith node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANumExpArith(ANumExpArith node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVariableFExpArith(AVariableFExpArith node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATypevarExpArith(ATypevarExpArith node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACallExpArith(ACallExpArith node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressionExpArith(AExpressionExpArith node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInput(TInput node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOutput(TOutput node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTString(TString node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInt(TInt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCommentLine(TCommentLine node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCommentBlock(TCommentBlock node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReturn(TReturn node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVoid(TVoid node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWhile(TWhile node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOpenBrace(TOpenBrace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCloseBrace(TCloseBrace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLsbrack(TLsbrack node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRsbrack(TRsbrack node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLpar(TLpar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRpar(TRpar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTScolon(TScolon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAtrib(TAtrib node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTimes(TTimes node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMod(TMod node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGreater(TGreater node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLess(TLess node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGequal(TGequal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLequal(TLequal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNot(TNot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTXor(TXor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDiff(TDiff node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEqual(TEqual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEqualequal(TEqualequal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMain(TMain node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNum(TNum node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
