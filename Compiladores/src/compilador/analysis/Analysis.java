/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.analysis;

import compilador.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseADeclListProgram(ADeclListProgram node);
    void caseASequenceDeclList(ASequenceDeclList node);
    void caseASingleDeclList(ASingleDeclList node);
    void caseAVariableDecl(AVariableDecl node);
    void caseAFunctionDecl(AFunctionDecl node);
    void caseAVarDecl(AVarDecl node);
    void caseAIntTypeDecl(AIntTypeDecl node);
    void caseAVoidTypeDecl(AVoidTypeDecl node);
    void caseAIdVarDeclId(AIdVarDeclId node);
    void caseABracksVarDeclId(ABracksVarDeclId node);
    void caseATypeFunDecl(ATypeFunDecl node);
    void caseANotypeFunDecl(ANotypeFunDecl node);
    void caseAPListParams(APListParams node);
    void caseAEmptyParams(AEmptyParams node);
    void caseAPListparamParamList(APListparamParamList node);
    void caseAParamParamList(AParamParamList node);
    void caseATypeDeclParamType(ATypeDeclParamType node);
    void caseAIdlistParamIdList(AIdlistParamIdList node);
    void caseAParamidParamIdList(AParamidParamIdList node);
    void caseAWithoutParamId(AWithoutParamId node);
    void caseAWithParamId(AWithParamId node);
    void caseAExpressionStatement(AExpressionStatement node);
    void caseACompoundStatement(ACompoundStatement node);
    void caseASelectionStatement(ASelectionStatement node);
    void caseAIterationStatement(AIterationStatement node);
    void caseAReturnStatement(AReturnStatement node);
    void caseAExpressionStmt(AExpressionStmt node);
    void caseAScolonExpressionStmt(AScolonExpressionStmt node);
    void caseAStatementList(AStatementList node);
    void caseAEmptyStatementList(AEmptyStatementList node);
    void caseACompoundStmt(ACompoundStmt node);
    void caseAIfSelectionStmt(AIfSelectionStmt node);
    void caseAStatement2(AStatement2 node);
    void caseAIterationStmt(AIterationStmt node);
    void caseAReturn1ReturnStmt(AReturn1ReturnStmt node);
    void caseAReturn2ReturnStmt(AReturn2ReturnStmt node);
    void caseAComparationExpression(AComparationExpression node);
    void caseAAddExpression(AAddExpression node);
    void caseALocalDeclaration(ALocalDeclaration node);
    void caseAEmptyLocalDeclaration(AEmptyLocalDeclaration node);
    void caseAA1SimpleExpression(AA1SimpleExpression node);
    void caseASingleSimpleExpression(ASingleSimpleExpression node);
    void caseAAddExp2(AAddExp2 node);
    void caseAAddtermAddExp(AAddtermAddExp node);
    void caseATermAddExp(ATermAddExp node);
    void caseATermfactorTerm(ATermfactorTerm node);
    void caseAFactorTerm(AFactorTerm node);
    void caseAMulFactor(AMulFactor node);
    void caseAImulFactor(AImulFactor node);
    void caseASingleMutable(ASingleMutable node);
    void caseAIdexpressionMutable(AIdexpressionMutable node);
    void caseAExpressionImmutable(AExpressionImmutable node);
    void caseACallImmutable(ACallImmutable node);
    void caseANumImmutable(ANumImmutable node);
    void caseACall(ACall node);
    void caseAArgs(AArgs node);
    void caseAEmptyArgs(AEmptyArgs node);
    void caseAListargsArgsList(AListargsArgsList node);
    void caseAExpressionArgsList(AExpressionArgsList node);
    void caseADiffRelOp(ADiffRelOp node);
    void caseAEqualRelOp(AEqualRelOp node);
    void caseAGreaterRelOp(AGreaterRelOp node);
    void caseALessRelOp(ALessRelOp node);
    void caseAGequalRelOp(AGequalRelOp node);
    void caseALequalRelOp(ALequalRelOp node);
    void caseAPlusAddOp(APlusAddOp node);
    void caseAMinusAddOp(AMinusAddOp node);
    void caseATimesMultOp(ATimesMultOp node);
    void caseADivMultOp(ADivMultOp node);
    void caseAModMultOp(AModMultOp node);

    void caseTBlank(TBlank node);
    void caseTString(TString node);
    void caseTInt(TInt node);
    void caseTIntegerNumber(TIntegerNumber node);
    void caseTTId(TTId node);
    void caseTTNum(TTNum node);
    void caseTCommentLine(TCommentLine node);
    void caseTCommentBlock(TCommentBlock node);
    void caseTIf(TIf node);
    void caseTElse(TElse node);
    void caseTReturn(TReturn node);
    void caseTVoid(TVoid node);
    void caseTWhile(TWhile node);
    void caseTOpenBrace(TOpenBrace node);
    void caseTCloseBrace(TCloseBrace node);
    void caseTLsbrack(TLsbrack node);
    void caseTRsbrack(TRsbrack node);
    void caseTLpar(TLpar node);
    void caseTRpar(TRpar node);
    void caseTComma(TComma node);
    void caseTScolon(TScolon node);
    void caseTAtrib(TAtrib node);
    void caseTColon(TColon node);
    void caseTDiv(TDiv node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTTimes(TTimes node);
    void caseTMod(TMod node);
    void caseTGreater(TGreater node);
    void caseTLess(TLess node);
    void caseTGequal(TGequal node);
    void caseTLequal(TLequal node);
    void caseTNot(TNot node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTXor(TXor node);
    void caseTDiff(TDiff node);
    void caseTEqual(TEqual node);
    void caseTEqualequal(TEqualequal node);
    void caseTIdentifier(TIdentifier node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
