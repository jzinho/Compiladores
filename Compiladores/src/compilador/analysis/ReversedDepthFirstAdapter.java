/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.analysis;

import java.util.*;
import compilador.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPProgram().apply(this);
        outStart(node);
    }

    public void inADeclListProgram(ADeclListProgram node)
    {
        defaultIn(node);
    }

    public void outADeclListProgram(ADeclListProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclListProgram(ADeclListProgram node)
    {
        inADeclListProgram(node);
        if(node.getDeclList() != null)
        {
            node.getDeclList().apply(this);
        }
        outADeclListProgram(node);
    }

    public void inADeclList(ADeclList node)
    {
        defaultIn(node);
    }

    public void outADeclList(ADeclList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclList(ADeclList node)
    {
        inADeclList(node);
        if(node.getDecl() != null)
        {
            node.getDecl().apply(this);
        }
        if(node.getDeclList() != null)
        {
            node.getDeclList().apply(this);
        }
        outADeclList(node);
    }

    public void inADeclDeclList(ADeclDeclList node)
    {
        defaultIn(node);
    }

    public void outADeclDeclList(ADeclDeclList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclDeclList(ADeclDeclList node)
    {
        inADeclDeclList(node);
        if(node.getDecl() != null)
        {
            node.getDecl().apply(this);
        }
        outADeclDeclList(node);
    }

    public void inAVarDeclDecl(AVarDeclDecl node)
    {
        defaultIn(node);
    }

    public void outAVarDeclDecl(AVarDeclDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDeclDecl(AVarDeclDecl node)
    {
        inAVarDeclDecl(node);
        if(node.getVarDecl() != null)
        {
            node.getVarDecl().apply(this);
        }
        outAVarDeclDecl(node);
    }

    public void inAFunDeclDecl(AFunDeclDecl node)
    {
        defaultIn(node);
    }

    public void outAFunDeclDecl(AFunDeclDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunDeclDecl(AFunDeclDecl node)
    {
        inAFunDeclDecl(node);
        if(node.getFunDecl() != null)
        {
            node.getFunDecl().apply(this);
        }
        outAFunDeclDecl(node);
    }

    public void inAVarDecl(AVarDecl node)
    {
        defaultIn(node);
    }

    public void outAVarDecl(AVarDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDecl(AVarDecl node)
    {
        inAVarDecl(node);
        if(node.getVarDeclId() != null)
        {
            node.getVarDeclId().apply(this);
        }
        if(node.getTypeDecl() != null)
        {
            node.getTypeDecl().apply(this);
        }
        outAVarDecl(node);
    }

    public void inAIntTypeDecl(AIntTypeDecl node)
    {
        defaultIn(node);
    }

    public void outAIntTypeDecl(AIntTypeDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntTypeDecl(AIntTypeDecl node)
    {
        inAIntTypeDecl(node);
        if(node.getIntegerNumber() != null)
        {
            node.getIntegerNumber().apply(this);
        }
        outAIntTypeDecl(node);
    }

    public void inAVoidTypeDecl(AVoidTypeDecl node)
    {
        defaultIn(node);
    }

    public void outAVoidTypeDecl(AVoidTypeDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVoidTypeDecl(AVoidTypeDecl node)
    {
        inAVoidTypeDecl(node);
        if(node.getVoid() != null)
        {
            node.getVoid().apply(this);
        }
        outAVoidTypeDecl(node);
    }

    public void inAIdVarDeclId(AIdVarDeclId node)
    {
        defaultIn(node);
    }

    public void outAIdVarDeclId(AIdVarDeclId node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdVarDeclId(AIdVarDeclId node)
    {
        inAIdVarDeclId(node);
        if(node.getTId() != null)
        {
            node.getTId().apply(this);
        }
        outAIdVarDeclId(node);
    }

    public void inAVarDecl2VarDeclId(AVarDecl2VarDeclId node)
    {
        defaultIn(node);
    }

    public void outAVarDecl2VarDeclId(AVarDecl2VarDeclId node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDecl2VarDeclId(AVarDecl2VarDeclId node)
    {
        inAVarDecl2VarDeclId(node);
        if(node.getVarDecl2() != null)
        {
            node.getVarDecl2().apply(this);
        }
        outAVarDecl2VarDeclId(node);
    }

    public void inAVarDecl2(AVarDecl2 node)
    {
        defaultIn(node);
    }

    public void outAVarDecl2(AVarDecl2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDecl2(AVarDecl2 node)
    {
        inAVarDecl2(node);
        if(node.getRsbrack() != null)
        {
            node.getRsbrack().apply(this);
        }
        if(node.getTNum() != null)
        {
            node.getTNum().apply(this);
        }
        if(node.getLsbrack() != null)
        {
            node.getLsbrack().apply(this);
        }
        if(node.getTId() != null)
        {
            node.getTId().apply(this);
        }
        outAVarDecl2(node);
    }

    public void inAFunDecl(AFunDecl node)
    {
        defaultIn(node);
    }

    public void outAFunDecl(AFunDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunDecl(AFunDecl node)
    {
        inAFunDecl(node);
        if(node.getTNum() != null)
        {
            node.getTNum().apply(this);
        }
        outAFunDecl(node);
    }

    public void inAExpressionStatement(AExpressionStatement node)
    {
        defaultIn(node);
    }

    public void outAExpressionStatement(AExpressionStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionStatement(AExpressionStatement node)
    {
        inAExpressionStatement(node);
        if(node.getExpressionStmt() != null)
        {
            node.getExpressionStmt().apply(this);
        }
        outAExpressionStatement(node);
    }

    public void inACompoundStatement(ACompoundStatement node)
    {
        defaultIn(node);
    }

    public void outACompoundStatement(ACompoundStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACompoundStatement(ACompoundStatement node)
    {
        inACompoundStatement(node);
        if(node.getCompoundStmt() != null)
        {
            node.getCompoundStmt().apply(this);
        }
        outACompoundStatement(node);
    }

    public void inASelectionStatement(ASelectionStatement node)
    {
        defaultIn(node);
    }

    public void outASelectionStatement(ASelectionStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASelectionStatement(ASelectionStatement node)
    {
        inASelectionStatement(node);
        if(node.getSelectionStmt() != null)
        {
            node.getSelectionStmt().apply(this);
        }
        outASelectionStatement(node);
    }

    public void inAIterationStatement(AIterationStatement node)
    {
        defaultIn(node);
    }

    public void outAIterationStatement(AIterationStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIterationStatement(AIterationStatement node)
    {
        inAIterationStatement(node);
        if(node.getIterationStmt() != null)
        {
            node.getIterationStmt().apply(this);
        }
        outAIterationStatement(node);
    }

    public void inAReturnStatement(AReturnStatement node)
    {
        defaultIn(node);
    }

    public void outAReturnStatement(AReturnStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnStatement(AReturnStatement node)
    {
        inAReturnStatement(node);
        if(node.getReturnStmt() != null)
        {
            node.getReturnStmt().apply(this);
        }
        outAReturnStatement(node);
    }

    public void inAExpressionStmt(AExpressionStmt node)
    {
        defaultIn(node);
    }

    public void outAExpressionStmt(AExpressionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionStmt(AExpressionStmt node)
    {
        inAExpressionStmt(node);
        if(node.getScolon() != null)
        {
            node.getScolon().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAExpressionStmt(node);
    }

    public void inAScolonExpressionStmt(AScolonExpressionStmt node)
    {
        defaultIn(node);
    }

    public void outAScolonExpressionStmt(AScolonExpressionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAScolonExpressionStmt(AScolonExpressionStmt node)
    {
        inAScolonExpressionStmt(node);
        if(node.getScolon() != null)
        {
            node.getScolon().apply(this);
        }
        outAScolonExpressionStmt(node);
    }

    public void inAStatementList(AStatementList node)
    {
        defaultIn(node);
    }

    public void outAStatementList(AStatementList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStatementList(AStatementList node)
    {
        inAStatementList(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getStatementList() != null)
        {
            node.getStatementList().apply(this);
        }
        outAStatementList(node);
    }

    public void inAScolonStatementList(AScolonStatementList node)
    {
        defaultIn(node);
    }

    public void outAScolonStatementList(AScolonStatementList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAScolonStatementList(AScolonStatementList node)
    {
        inAScolonStatementList(node);
        if(node.getScolon() != null)
        {
            node.getScolon().apply(this);
        }
        outAScolonStatementList(node);
    }

    public void inACompoundStmt(ACompoundStmt node)
    {
        defaultIn(node);
    }

    public void outACompoundStmt(ACompoundStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACompoundStmt(ACompoundStmt node)
    {
        inACompoundStmt(node);
        if(node.getCloseBrace() != null)
        {
            node.getCloseBrace().apply(this);
        }
        if(node.getStatementList() != null)
        {
            node.getStatementList().apply(this);
        }
        if(node.getLocalDeclaration() != null)
        {
            node.getLocalDeclaration().apply(this);
        }
        if(node.getOpenBrace() != null)
        {
            node.getOpenBrace().apply(this);
        }
        outACompoundStmt(node);
    }

    public void inAIfSelectionStmt(AIfSelectionStmt node)
    {
        defaultIn(node);
    }

    public void outAIfSelectionStmt(AIfSelectionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfSelectionStmt(AIfSelectionStmt node)
    {
        inAIfSelectionStmt(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAIfSelectionStmt(node);
    }

    public void inAIterationStmt(AIterationStmt node)
    {
        defaultIn(node);
    }

    public void outAIterationStmt(AIterationStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIterationStmt(AIterationStmt node)
    {
        inAIterationStmt(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        outAIterationStmt(node);
    }

    public void inAReturn1ReturnStmt(AReturn1ReturnStmt node)
    {
        defaultIn(node);
    }

    public void outAReturn1ReturnStmt(AReturn1ReturnStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturn1ReturnStmt(AReturn1ReturnStmt node)
    {
        inAReturn1ReturnStmt(node);
        if(node.getScolon() != null)
        {
            node.getScolon().apply(this);
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        outAReturn1ReturnStmt(node);
    }

    public void inAReturn2ReturnStmt(AReturn2ReturnStmt node)
    {
        defaultIn(node);
    }

    public void outAReturn2ReturnStmt(AReturn2ReturnStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturn2ReturnStmt(AReturn2ReturnStmt node)
    {
        inAReturn2ReturnStmt(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        outAReturn2ReturnStmt(node);
    }

    public void inAComparationExpression(AComparationExpression node)
    {
        defaultIn(node);
    }

    public void outAComparationExpression(AComparationExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComparationExpression(AComparationExpression node)
    {
        inAComparationExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAComparationExpression(node);
    }

    public void inAAddExpression(AAddExpression node)
    {
        defaultIn(node);
    }

    public void outAAddExpression(AAddExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddExpression(AAddExpression node)
    {
        inAAddExpression(node);
        if(node.getSimpleExpression() != null)
        {
            node.getSimpleExpression().apply(this);
        }
        outAAddExpression(node);
    }

    public void inALocalDeclaration(ALocalDeclaration node)
    {
        defaultIn(node);
    }

    public void outALocalDeclaration(ALocalDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALocalDeclaration(ALocalDeclaration node)
    {
        inALocalDeclaration(node);
        if(node.getVarDecl() != null)
        {
            node.getVarDecl().apply(this);
        }
        if(node.getLocalDeclaration() != null)
        {
            node.getLocalDeclaration().apply(this);
        }
        outALocalDeclaration(node);
    }

    public void inAScolonLocalDeclaration(AScolonLocalDeclaration node)
    {
        defaultIn(node);
    }

    public void outAScolonLocalDeclaration(AScolonLocalDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAScolonLocalDeclaration(AScolonLocalDeclaration node)
    {
        inAScolonLocalDeclaration(node);
        if(node.getScolon() != null)
        {
            node.getScolon().apply(this);
        }
        outAScolonLocalDeclaration(node);
    }

    public void inAA1SimpleExpression(AA1SimpleExpression node)
    {
        defaultIn(node);
    }

    public void outAA1SimpleExpression(AA1SimpleExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAA1SimpleExpression(AA1SimpleExpression node)
    {
        inAA1SimpleExpression(node);
        if(node.getAddExp2() != null)
        {
            node.getAddExp2().apply(this);
        }
        if(node.getRelOp() != null)
        {
            node.getRelOp().apply(this);
        }
        if(node.getAddExp() != null)
        {
            node.getAddExp().apply(this);
        }
        outAA1SimpleExpression(node);
    }

    public void inAA2SimpleExpression(AA2SimpleExpression node)
    {
        defaultIn(node);
    }

    public void outAA2SimpleExpression(AA2SimpleExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAA2SimpleExpression(AA2SimpleExpression node)
    {
        inAA2SimpleExpression(node);
        if(node.getAddExp() != null)
        {
            node.getAddExp().apply(this);
        }
        outAA2SimpleExpression(node);
    }

    public void inAAddExp2(AAddExp2 node)
    {
        defaultIn(node);
    }

    public void outAAddExp2(AAddExp2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddExp2(AAddExp2 node)
    {
        inAAddExp2(node);
        if(node.getAddExp() != null)
        {
            node.getAddExp().apply(this);
        }
        outAAddExp2(node);
    }

    public void inAAddtermAddExp(AAddtermAddExp node)
    {
        defaultIn(node);
    }

    public void outAAddtermAddExp(AAddtermAddExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddtermAddExp(AAddtermAddExp node)
    {
        inAAddtermAddExp(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getAddOp() != null)
        {
            node.getAddOp().apply(this);
        }
        if(node.getAddExp() != null)
        {
            node.getAddExp().apply(this);
        }
        outAAddtermAddExp(node);
    }

    public void inATermAddExp(ATermAddExp node)
    {
        defaultIn(node);
    }

    public void outATermAddExp(ATermAddExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermAddExp(ATermAddExp node)
    {
        inATermAddExp(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outATermAddExp(node);
    }

    public void inAScolonTerm(AScolonTerm node)
    {
        defaultIn(node);
    }

    public void outAScolonTerm(AScolonTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAScolonTerm(AScolonTerm node)
    {
        inAScolonTerm(node);
        if(node.getScolon() != null)
        {
            node.getScolon().apply(this);
        }
        outAScolonTerm(node);
    }

    public void inAIdVar(AIdVar node)
    {
        defaultIn(node);
    }

    public void outAIdVar(AIdVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdVar(AIdVar node)
    {
        inAIdVar(node);
        if(node.getTId() != null)
        {
            node.getTId().apply(this);
        }
        outAIdVar(node);
    }

    public void inAIdcompostoVar(AIdcompostoVar node)
    {
        defaultIn(node);
    }

    public void outAIdcompostoVar(AIdcompostoVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdcompostoVar(AIdcompostoVar node)
    {
        inAIdcompostoVar(node);
        if(node.getRsbrack() != null)
        {
            node.getRsbrack().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLsbrack() != null)
        {
            node.getLsbrack().apply(this);
        }
        if(node.getTId() != null)
        {
            node.getTId().apply(this);
        }
        outAIdcompostoVar(node);
    }

    public void inADiffRelOp(ADiffRelOp node)
    {
        defaultIn(node);
    }

    public void outADiffRelOp(ADiffRelOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADiffRelOp(ADiffRelOp node)
    {
        inADiffRelOp(node);
        if(node.getDiff() != null)
        {
            node.getDiff().apply(this);
        }
        outADiffRelOp(node);
    }

    public void inAEqualRelOp(AEqualRelOp node)
    {
        defaultIn(node);
    }

    public void outAEqualRelOp(AEqualRelOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualRelOp(AEqualRelOp node)
    {
        inAEqualRelOp(node);
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        outAEqualRelOp(node);
    }

    public void inAGreaterRelOp(AGreaterRelOp node)
    {
        defaultIn(node);
    }

    public void outAGreaterRelOp(AGreaterRelOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterRelOp(AGreaterRelOp node)
    {
        inAGreaterRelOp(node);
        if(node.getGreater() != null)
        {
            node.getGreater().apply(this);
        }
        outAGreaterRelOp(node);
    }

    public void inALessRelOp(ALessRelOp node)
    {
        defaultIn(node);
    }

    public void outALessRelOp(ALessRelOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessRelOp(ALessRelOp node)
    {
        inALessRelOp(node);
        if(node.getLess() != null)
        {
            node.getLess().apply(this);
        }
        outALessRelOp(node);
    }

    public void inAGequalRelOp(AGequalRelOp node)
    {
        defaultIn(node);
    }

    public void outAGequalRelOp(AGequalRelOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGequalRelOp(AGequalRelOp node)
    {
        inAGequalRelOp(node);
        if(node.getGequal() != null)
        {
            node.getGequal().apply(this);
        }
        outAGequalRelOp(node);
    }

    public void inALequalRelOp(ALequalRelOp node)
    {
        defaultIn(node);
    }

    public void outALequalRelOp(ALequalRelOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALequalRelOp(ALequalRelOp node)
    {
        inALequalRelOp(node);
        if(node.getLequal() != null)
        {
            node.getLequal().apply(this);
        }
        outALequalRelOp(node);
    }

    public void inAPlusAddOp(APlusAddOp node)
    {
        defaultIn(node);
    }

    public void outAPlusAddOp(APlusAddOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusAddOp(APlusAddOp node)
    {
        inAPlusAddOp(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAPlusAddOp(node);
    }

    public void inAMinusAddOp(AMinusAddOp node)
    {
        defaultIn(node);
    }

    public void outAMinusAddOp(AMinusAddOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusAddOp(AMinusAddOp node)
    {
        inAMinusAddOp(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusAddOp(node);
    }

    public void inATimesMultOp(ATimesMultOp node)
    {
        defaultIn(node);
    }

    public void outATimesMultOp(ATimesMultOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATimesMultOp(ATimesMultOp node)
    {
        inATimesMultOp(node);
        if(node.getTimes() != null)
        {
            node.getTimes().apply(this);
        }
        outATimesMultOp(node);
    }

    public void inADivMultOp(ADivMultOp node)
    {
        defaultIn(node);
    }

    public void outADivMultOp(ADivMultOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivMultOp(ADivMultOp node)
    {
        inADivMultOp(node);
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        outADivMultOp(node);
    }

    public void inAModMultOp(AModMultOp node)
    {
        defaultIn(node);
    }

    public void outAModMultOp(AModMultOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModMultOp(AModMultOp node)
    {
        inAModMultOp(node);
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        outAModMultOp(node);
    }
}
