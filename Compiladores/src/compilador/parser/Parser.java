/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.parser;

import compilador.lexer.*;
import compilador.node.*;
import compilador.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAprogram1Program */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AAprogram2Program */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list);
            }
            break;
            case 2: /* reduce AMainDeclMain */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list);
            }
            break;
            case 3: /* reduce AVarDecl */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list);
            }
            break;
            case 4: /* reduce AFunctionDecl */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list);
            }
            break;
            case 5: /* reduce AVariableVarDecl */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list);
            }
            break;
            case 6: /* reduce ASingleTypeVar */
            {
                ArrayList<Object> list = new6();
                push(goTo(4), list);
            }
            break;
            case 7: /* reduce ACompTypeVar */
            {
                ArrayList<Object> list = new7();
                push(goTo(4), list);
            }
            break;
            case 8: /* reduce ACompDecl */
            {
                ArrayList<Object> list = new8();
                push(goTo(5), list);
            }
            break;
            case 9: /* reduce AValTypeDecl */
            {
                ArrayList<Object> list = new9();
                push(goTo(6), list);
            }
            break;
            case 10: /* reduce ANotTypeDecl */
            {
                ArrayList<Object> list = new10();
                push(goTo(6), list);
            }
            break;
            case 11: /* reduce AIntTypeValored */
            {
                ArrayList<Object> list = new11();
                push(goTo(7), list);
            }
            break;
            case 12: /* reduce AStringTypeValored */
            {
                ArrayList<Object> list = new12();
                push(goTo(7), list);
            }
            break;
            case 13: /* reduce AVoidTypeNot */
            {
                ArrayList<Object> list = new13();
                push(goTo(8), list);
            }
            break;
            case 14: /* reduce AArgsFunDecl */
            {
                ArrayList<Object> list = new14();
                push(goTo(9), list);
            }
            break;
            case 15: /* reduce AParamListParams */
            {
                ArrayList<Object> list = new15();
                push(goTo(10), list);
            }
            break;
            case 16: /* reduce AVoidParams */
            {
                ArrayList<Object> list = new16();
                push(goTo(10), list);
            }
            break;
            case 17: /* reduce ASequenceParamList */
            {
                ArrayList<Object> list = new17();
                push(goTo(11), list);
            }
            break;
            case 18: /* reduce ASingleParamList */
            {
                ArrayList<Object> list = new18();
                push(goTo(11), list);
            }
            break;
            case 19: /* reduce ANormalParam */
            {
                ArrayList<Object> list = new19();
                push(goTo(12), list);
            }
            break;
            case 20: /* reduce ABracksParam */
            {
                ArrayList<Object> list = new20();
                push(goTo(12), list);
            }
            break;
            case 21: /* reduce AExpressionStatement */
            {
                ArrayList<Object> list = new21();
                push(goTo(13), list);
            }
            break;
            case 22: /* reduce ACompoundStatement */
            {
                ArrayList<Object> list = new22();
                push(goTo(13), list);
            }
            break;
            case 23: /* reduce ASelectionStatement */
            {
                ArrayList<Object> list = new23();
                push(goTo(13), list);
            }
            break;
            case 24: /* reduce AIterationStatement */
            {
                ArrayList<Object> list = new24();
                push(goTo(13), list);
            }
            break;
            case 25: /* reduce AReturnStatement */
            {
                ArrayList<Object> list = new25();
                push(goTo(13), list);
            }
            break;
            case 26: /* reduce ASelseStatementElse */
            {
                ArrayList<Object> list = new26();
                push(goTo(14), list);
            }
            break;
            case 27: /* reduce AExpressionStatementElse */
            {
                ArrayList<Object> list = new27();
                push(goTo(14), list);
            }
            break;
            case 28: /* reduce ACompoundStatementElse */
            {
                ArrayList<Object> list = new28();
                push(goTo(14), list);
            }
            break;
            case 29: /* reduce AIterationStatementElse */
            {
                ArrayList<Object> list = new29();
                push(goTo(14), list);
            }
            break;
            case 30: /* reduce AReturnStatementElse */
            {
                ArrayList<Object> list = new30();
                push(goTo(14), list);
            }
            break;
            case 31: /* reduce AExpressionStmt */
            {
                ArrayList<Object> list = new31();
                push(goTo(15), list);
            }
            break;
            case 32: /* reduce AEmptyExpressionStmt */
            {
                ArrayList<Object> list = new32();
                push(goTo(15), list);
            }
            break;
            case 33: /* reduce AStatementList */
            {
                ArrayList<Object> list = new33();
                push(goTo(16), list);
            }
            break;
            case 34: /* reduce AEmptyStatementList */
            {
                ArrayList<Object> list = new34();
                push(goTo(16), list);
            }
            break;
            case 35: /* reduce AIfSelectionStmt */
            {
                ArrayList<Object> list = new35();
                push(goTo(17), list);
            }
            break;
            case 36: /* reduce AIfelseSelectionStmt */
            {
                ArrayList<Object> list = new36();
                push(goTo(17), list);
            }
            break;
            case 37: /* reduce AAcompoundstmt1CompoundStmt */
            {
                ArrayList<Object> list = new37();
                push(goTo(18), list);
            }
            break;
            case 38: /* reduce AAcompoundstmt2CompoundStmt */
            {
                ArrayList<Object> list = new38();
                push(goTo(18), list);
            }
            break;
            case 39: /* reduce AIfelseSelectionStmtElse */
            {
                ArrayList<Object> list = new39();
                push(goTo(19), list);
            }
            break;
            case 40: /* reduce AElseIterationStmt */
            {
                ArrayList<Object> list = new40();
                push(goTo(20), list);
            }
            break;
            case 41: /* reduce ANoelseIterationElse */
            {
                ArrayList<Object> list = new41();
                push(goTo(21), list);
            }
            break;
            case 42: /* reduce AEmptyReturnStmt */
            {
                ArrayList<Object> list = new42();
                push(goTo(22), list);
            }
            break;
            case 43: /* reduce AReturn2ReturnStmt */
            {
                ArrayList<Object> list = new43();
                push(goTo(22), list);
            }
            break;
            case 44: /* reduce ANotAttExpression */
            {
                ArrayList<Object> list = new44();
                push(goTo(23), list);
            }
            break;
            case 45: /* reduce AAttExpression */
            {
                ArrayList<Object> list = new45();
                push(goTo(23), list);
            }
            break;
            case 46: /* reduce AExpLogicNotAtt */
            {
                ArrayList<Object> list = new46();
                push(goTo(24), list);
            }
            break;
            case 47: /* reduce AExpArithNotAtt */
            {
                ArrayList<Object> list = new47();
                push(goTo(24), list);
            }
            break;
            case 48: /* reduce ADiffExpLogic */
            {
                ArrayList<Object> list = new48();
                push(goTo(25), list);
            }
            break;
            case 49: /* reduce AEqualExpLogic */
            {
                ArrayList<Object> list = new49();
                push(goTo(25), list);
            }
            break;
            case 50: /* reduce AGreaterExpLogic */
            {
                ArrayList<Object> list = new50();
                push(goTo(25), list);
            }
            break;
            case 51: /* reduce ALessExpLogic */
            {
                ArrayList<Object> list = new51();
                push(goTo(25), list);
            }
            break;
            case 52: /* reduce AGequalExpLogic */
            {
                ArrayList<Object> list = new52();
                push(goTo(25), list);
            }
            break;
            case 53: /* reduce ALequalExpLogic */
            {
                ArrayList<Object> list = new53();
                push(goTo(25), list);
            }
            break;
            case 54: /* reduce APlusExpArith */
            {
                ArrayList<Object> list = new54();
                push(goTo(26), list);
            }
            break;
            case 55: /* reduce AMinusExpArith */
            {
                ArrayList<Object> list = new55();
                push(goTo(26), list);
            }
            break;
            case 56: /* reduce ATermExpArith */
            {
                ArrayList<Object> list = new56();
                push(goTo(26), list);
            }
            break;
            case 57: /* reduce ATimesTerm */
            {
                ArrayList<Object> list = new57();
                push(goTo(27), list);
            }
            break;
            case 58: /* reduce ADivTerm */
            {
                ArrayList<Object> list = new58();
                push(goTo(27), list);
            }
            break;
            case 59: /* reduce AModTerm */
            {
                ArrayList<Object> list = new59();
                push(goTo(27), list);
            }
            break;
            case 60: /* reduce AFactorTerm */
            {
                ArrayList<Object> list = new60();
                push(goTo(27), list);
            }
            break;
            case 61: /* reduce AFExpressionFactor */
            {
                ArrayList<Object> list = new61();
                push(goTo(28), list);
            }
            break;
            case 62: /* reduce AFVariableFactor */
            {
                ArrayList<Object> list = new62();
                push(goTo(28), list);
            }
            break;
            case 63: /* reduce ACallFactor */
            {
                ArrayList<Object> list = new63();
                push(goTo(28), list);
            }
            break;
            case 64: /* reduce ANumFactor */
            {
                ArrayList<Object> list = new64();
                push(goTo(28), list);
            }
            break;
            case 65: /* reduce ACallFuncCall */
            {
                ArrayList<Object> list = new65();
                push(goTo(29), list);
            }
            break;
            case 66: /* reduce AListArgs */
            {
                ArrayList<Object> list = new66();
                push(goTo(30), list);
            }
            break;
            case 67: /* reduce AListargsArgsList */
            {
                ArrayList<Object> list = new67();
                push(goTo(31), list);
            }
            break;
            case 68: /* reduce AExpArgsList */
            {
                ArrayList<Object> list = new68();
                push(goTo(31), list);
            }
            break;
            case 69: /* reduce ATerminal$Decl */
            {
                ArrayList<Object> list = new69();
                push(goTo(32), list);
            }
            break;
            case 70: /* reduce ANonTerminal$Decl */
            {
                ArrayList<Object> list = new70();
                push(goTo(32), list);
            }
            break;
            case 71: /* reduce ATerminal$CompDecl */
            {
                ArrayList<Object> list = new71();
                push(goTo(33), list);
            }
            break;
            case 72: /* reduce ANonTerminal$CompDecl */
            {
                ArrayList<Object> list = new72();
                push(goTo(33), list);
            }
            break;
            case 73: /* reduce ATerminal$VarDecl */
            {
                ArrayList<Object> list = new73();
                push(goTo(34), list);
            }
            break;
            case 74: /* reduce ANonTerminal$VarDecl */
            {
                ArrayList<Object> list = new74();
                push(goTo(34), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAprogram1Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PDecl pdeclNode2;
        pdeclNode2 = (PDecl)nodeArrayList1.get(0);
	if(pdeclNode2 != null)
	{
	  listNode3.add(pdeclNode2);
	}
        }

        pprogramNode1 = new AProgram(listNode3);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAprogram2Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PDecl pdeclNode3;
        listNode2 = (LinkedList)nodeArrayList1.get(0);
        pdeclNode3 = (PDecl)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode4.addAll(listNode2);
	}
	if(pdeclNode3 != null)
	{
	  listNode4.add(pdeclNode3);
	}
        }

        pprogramNode1 = new AProgram(listNode4);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AMainDeclMain */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecl pdeclNode1;
        {
            // Block
        PType ptypeNode2;
        TMain tmainNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tmainNode3 = (TMain)nodeArrayList2.get(0);
        {
            // Block
        PStatement pstatementNode4;
        pstatementNode4 = (PStatement)nodeArrayList6.get(0);
	if(pstatementNode4 != null)
	{
	  listNode5.add(pstatementNode4);
	}
        }

        pdeclNode1 = new AMainFuncDecl(ptypeNode2, tmainNode3, listNode5);
        }
	nodeList.add(pdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AVarDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecl pdeclNode1;
        pdeclNode1 = (PDecl)nodeArrayList1.get(0);
	nodeList.add(pdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AFunctionDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecl pdeclNode1;
        pdeclNode1 = (PDecl)nodeArrayList1.get(0);
	nodeList.add(pdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AVariableVarDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecl pdeclNode1;
        {
            // Block
        PType ptypeNode2;
        PTypevar ptypevarNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        ptypevarNode3 = (PTypevar)nodeArrayList2.get(0);

        pdeclNode1 = new AVariableDecl(ptypeNode2, ptypevarNode3);
        }
	nodeList.add(pdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce ASingleTypeVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTypevar ptypevarNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        ptypevarNode1 = new ASingleTypevar(tidNode2);
        }
	nodeList.add(ptypevarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ACompTypeVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTypevar ptypevarNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        ptypevarNode1 = new ACompTypevar(tidNode2, listNode4);
        }
	nodeList.add(ptypevarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ACompDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComp pcompNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);

        pcompNode1 = new ADimComp(pexpressionNode2);
        }
	nodeList.add(pcompNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AValTypeDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        ptypeNode1 = (PType)nodeArrayList1.get(0);
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ANotTypeDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        ptypeNode1 = (PType)nodeArrayList1.get(0);
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AIntTypeValored */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        ptypeNode1 = new AIntType(tintNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AStringTypeValored */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        ptypeNode1 = new AStringType(tstringNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AVoidTypeNot */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TVoid tvoidNode2;
        tvoidNode2 = (TVoid)nodeArrayList1.get(0);

        ptypeNode1 = new AVoidType(tvoidNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AArgsFunDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecl pdeclNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList4.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        PStatement pstatementNode6;
        pstatementNode6 = (PStatement)nodeArrayList6.get(0);
	if(pstatementNode6 != null)
	{
	  listNode7.add(pstatementNode6);
	}
        }

        pdeclNode1 = new AFunDeclDecl(ptypeNode2, tidNode3, listNode5, listNode7);
        }
	nodeList.add(pdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AParamListParams */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        listNode1 = (LinkedList)nodeArrayList1.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AVoidParams */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PParam pparamNode1;
        {
            // Block
        TVoid tvoidNode2;
        tvoidNode2 = (TVoid)nodeArrayList1.get(0);

        pparamNode1 = new AParamVoidParam(tvoidNode2);
        }
	if(pparamNode1 != null)
	{
	  listNode3.add(pparamNode1);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce ASequenceParamList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PParam pparamNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pparamNode2 = (PParam)nodeArrayList3.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pparamNode2 != null)
	{
	  listNode3.add(pparamNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce ASingleParamList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PParam pparamNode1;
        pparamNode1 = (PParam)nodeArrayList1.get(0);
	if(pparamNode1 != null)
	{
	  listNode2.add(pparamNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce ANormalParam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParam pparamNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pparamNode1 = new ADeclParamParam(ptypeNode2, tidNode3);
        }
	nodeList.add(pparamNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce ABracksParam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParam pparamNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pparamNode1 = new ADeclParamParam(ptypeNode2, tidNode3);
        }
	nodeList.add(pparamNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AExpressionStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce ACompoundStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ASelectionStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AIterationStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AReturnStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce ASelseStatementElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AExpressionStatementElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ACompoundStatementElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AIterationStatementElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AReturnStatementElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AExpressionStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);

        pstatementNode1 = new AStmtExprStatement(pexpressionNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AEmptyExpressionStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block

        pstatementNode1 = new AEmptyStatement();
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AStatementList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PStatement pstatementNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstatementNode2 = (PStatement)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstatementNode2 != null)
	{
	  listNode3.add(pstatementNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AEmptyStatementList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PStatement pstatementNode1;
        {
            // Block

        pstatementNode1 = new AEmptyStatement();
        }
	if(pstatementNode1 != null)
	{
	  listNode2.add(pstatementNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AIfSelectionStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpLogic pexplogicNode2;
        PStatement pstatementNode3;
        pexplogicNode2 = (PExpLogic)nodeArrayList3.get(0);
        pstatementNode3 = (PStatement)nodeArrayList5.get(0);

        pstatementNode1 = new AStmtSelectIfStatement(pexplogicNode2, pstatementNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AIfelseSelectionStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpLogic pexplogicNode2;
        PStatement pstatementNode3;
        PStatement pstatementNode4;
        pexplogicNode2 = (PExpLogic)nodeArrayList3.get(0);
        pstatementNode3 = (PStatement)nodeArrayList5.get(0);
        pstatementNode4 = (PStatement)nodeArrayList7.get(0);

        pstatementNode1 = new AStmtSelectIfElseStatement(pexplogicNode2, pstatementNode3, pstatementNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AAcompoundstmt1CompoundStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pstatementNode1 = new ACompStmtStatement(listNode2, listNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AAcompoundstmt2CompoundStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pstatementNode1 = new ACompStmtStatement(listNode3, listNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AIfelseSelectionStmtElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpLogic pexplogicNode2;
        PStatement pstatementNode3;
        PStatement pstatementNode4;
        pexplogicNode2 = (PExpLogic)nodeArrayList3.get(0);
        pstatementNode3 = (PStatement)nodeArrayList5.get(0);
        pstatementNode4 = (PStatement)nodeArrayList7.get(0);

        pstatementNode1 = new AStmtSelectIfElseStatement(pexplogicNode2, pstatementNode3, pstatementNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AElseIterationStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpLogic pexplogicNode2;
        PStatement pstatementNode3;
        pexplogicNode2 = (PExpLogic)nodeArrayList3.get(0);
        pstatementNode3 = (PStatement)nodeArrayList5.get(0);

        pstatementNode1 = new AIterationStatement(pexplogicNode2, pstatementNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce ANoelseIterationElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpLogic pexplogicNode2;
        PStatement pstatementNode3;
        pexplogicNode2 = (PExpLogic)nodeArrayList3.get(0);
        pstatementNode3 = (PStatement)nodeArrayList5.get(0);

        pstatementNode1 = new AIterationStatement(pexplogicNode2, pstatementNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AEmptyReturnStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block

        pstatementNode1 = new AEmptyStatement();
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AReturn2ReturnStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);

        pstatementNode1 = new AStmtReturnStatement(pexpressionNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce ANotAttExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AAttExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TId tidNode2;
        PExpression pexpressionNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AAttExpression(tidNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AExpLogicNotAtt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpLogic pexplogicNode2;
        pexplogicNode2 = (PExpLogic)nodeArrayList1.get(0);

        pexpressionNode1 = new AExpLogicExpression(pexplogicNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AExpArithNotAtt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpArith pexparithNode2;
        pexparithNode2 = (PExpArith)nodeArrayList1.get(0);

        pexpressionNode1 = new AExpArithExpression(pexparithNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce ADiffExpLogic */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogic pexplogicNode1;
        {
            // Block
        PExpArith pexparithNode2;
        PExpArith pexparithNode3;
        pexparithNode2 = (PExpArith)nodeArrayList1.get(0);
        pexparithNode3 = (PExpArith)nodeArrayList3.get(0);

        pexplogicNode1 = new ADiffExpLogic(pexparithNode2, pexparithNode3);
        }
	nodeList.add(pexplogicNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AEqualExpLogic */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogic pexplogicNode1;
        {
            // Block
        PExpArith pexparithNode2;
        PExpArith pexparithNode3;
        pexparithNode2 = (PExpArith)nodeArrayList1.get(0);
        pexparithNode3 = (PExpArith)nodeArrayList3.get(0);

        pexplogicNode1 = new AEqualequalExpLogic(pexparithNode2, pexparithNode3);
        }
	nodeList.add(pexplogicNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AGreaterExpLogic */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogic pexplogicNode1;
        {
            // Block
        PExpArith pexparithNode2;
        PExpArith pexparithNode3;
        pexparithNode2 = (PExpArith)nodeArrayList1.get(0);
        pexparithNode3 = (PExpArith)nodeArrayList3.get(0);

        pexplogicNode1 = new AGreaterExpLogic(pexparithNode2, pexparithNode3);
        }
	nodeList.add(pexplogicNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce ALessExpLogic */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogic pexplogicNode1;
        {
            // Block
        PExpArith pexparithNode2;
        PExpArith pexparithNode3;
        pexparithNode2 = (PExpArith)nodeArrayList1.get(0);
        pexparithNode3 = (PExpArith)nodeArrayList3.get(0);

        pexplogicNode1 = new ALessExpLogic(pexparithNode2, pexparithNode3);
        }
	nodeList.add(pexplogicNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AGequalExpLogic */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogic pexplogicNode1;
        {
            // Block
        PExpArith pexparithNode2;
        PExpArith pexparithNode3;
        pexparithNode2 = (PExpArith)nodeArrayList1.get(0);
        pexparithNode3 = (PExpArith)nodeArrayList3.get(0);

        pexplogicNode1 = new AGequalExpLogic(pexparithNode2, pexparithNode3);
        }
	nodeList.add(pexplogicNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce ALequalExpLogic */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogic pexplogicNode1;
        {
            // Block
        PExpArith pexparithNode2;
        PExpArith pexparithNode3;
        pexparithNode2 = (PExpArith)nodeArrayList1.get(0);
        pexparithNode3 = (PExpArith)nodeArrayList3.get(0);

        pexplogicNode1 = new ALequalExpLogic(pexparithNode2, pexparithNode3);
        }
	nodeList.add(pexplogicNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce APlusExpArith */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpArith pexparithNode1;
        {
            // Block
        PExpArith pexparithNode2;
        PExpArith pexparithNode3;
        pexparithNode2 = (PExpArith)nodeArrayList1.get(0);
        pexparithNode3 = (PExpArith)nodeArrayList3.get(0);

        pexparithNode1 = new APlusExpArith(pexparithNode2, pexparithNode3);
        }
	nodeList.add(pexparithNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AMinusExpArith */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpArith pexparithNode1;
        {
            // Block
        PExpArith pexparithNode2;
        PExpArith pexparithNode3;
        pexparithNode2 = (PExpArith)nodeArrayList1.get(0);
        pexparithNode3 = (PExpArith)nodeArrayList3.get(0);

        pexparithNode1 = new AMinusExpArith(pexparithNode2, pexparithNode3);
        }
	nodeList.add(pexparithNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce ATermExpArith */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpArith pexparithNode1;
        pexparithNode1 = (PExpArith)nodeArrayList1.get(0);
	nodeList.add(pexparithNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce ATimesTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpArith pexparithNode1;
        {
            // Block
        PExpArith pexparithNode2;
        PExpArith pexparithNode3;
        pexparithNode2 = (PExpArith)nodeArrayList1.get(0);
        pexparithNode3 = (PExpArith)nodeArrayList3.get(0);

        pexparithNode1 = new ATimesExpArith(pexparithNode2, pexparithNode3);
        }
	nodeList.add(pexparithNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce ADivTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpArith pexparithNode1;
        {
            // Block
        PExpArith pexparithNode2;
        PExpArith pexparithNode3;
        pexparithNode2 = (PExpArith)nodeArrayList1.get(0);
        pexparithNode3 = (PExpArith)nodeArrayList3.get(0);

        pexparithNode1 = new ADivExpArith(pexparithNode2, pexparithNode3);
        }
	nodeList.add(pexparithNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AModTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpArith pexparithNode1;
        {
            // Block
        PExpArith pexparithNode2;
        PExpArith pexparithNode3;
        pexparithNode2 = (PExpArith)nodeArrayList1.get(0);
        pexparithNode3 = (PExpArith)nodeArrayList3.get(0);

        pexparithNode1 = new AModExpArith(pexparithNode2, pexparithNode3);
        }
	nodeList.add(pexparithNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AFactorTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpArith pexparithNode1;
        pexparithNode1 = (PExpArith)nodeArrayList1.get(0);
	nodeList.add(pexparithNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AFExpressionFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpArith pexparithNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);

        pexparithNode1 = new AExpressionExpArith(pexpressionNode2);
        }
	nodeList.add(pexparithNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AFVariableFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpArith pexparithNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pexparithNode1 = new AVariableFExpArith(tidNode2);
        }
	nodeList.add(pexparithNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce ACallFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpArith pexparithNode1;
        pexparithNode1 = (PExpArith)nodeArrayList1.get(0);
	nodeList.add(pexparithNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce ANumFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpArith pexparithNode1;
        {
            // Block
        TNum tnumNode2;
        tnumNode2 = (TNum)nodeArrayList1.get(0);

        pexparithNode1 = new ANumExpArith(tnumNode2);
        }
	nodeList.add(pexparithNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce ACallFuncCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpArith pexparithNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pexparithNode1 = new ACallExpArith(tidNode2, listNode4);
        }
	nodeList.add(pexparithNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce AListArgs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        listNode1 = (LinkedList)nodeArrayList1.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AListargsArgsList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PExpression pexpressionNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        pexpressionNode1 = (PExpression)nodeArrayList3.get(0);
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(pexpressionNode1 != null)
	{
	  listNode3.add(pexpressionNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce AExpArgsList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	if(pexpressionNode1 != null)
	{
	  listNode2.add(pexpressionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce ATerminal$Decl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDecl pdeclNode1;
        pdeclNode1 = (PDecl)nodeArrayList1.get(0);
	if(pdeclNode1 != null)
	{
	  listNode2.add(pdeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce ANonTerminal$Decl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PDecl pdeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdeclNode2 = (PDecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdeclNode2 != null)
	{
	  listNode3.add(pdeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce ATerminal$CompDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PComp pcompNode1;
        pcompNode1 = (PComp)nodeArrayList1.get(0);
	if(pcompNode1 != null)
	{
	  listNode2.add(pcompNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce ANonTerminal$CompDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PComp pcompNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcompNode2 = (PComp)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcompNode2 != null)
	{
	  listNode3.add(pcompNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce ATerminal$VarDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDecl pdeclNode1;
        pdeclNode1 = (PDecl)nodeArrayList1.get(0);
	if(pdeclNode1 != null)
	{
	  listNode2.add(pdeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce ANonTerminal$VarDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PDecl pdeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdeclNode2 = (PDecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdeclNode2 != null)
	{
	  listNode3.add(pdeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {2, SHIFT, 1}, {3, SHIFT, 2}, {7, SHIFT, 3}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 4}, {38, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 8}, {35, SHIFT, 13}, {36, SHIFT, 14}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 12}, {2, SHIFT, 1}, {3, SHIFT, 2}, {7, SHIFT, 3}, },
			{{-1, ERROR, 13}, {13, SHIFT, 18}, },
			{{-1, REDUCE, 6}, {11, SHIFT, 19}, {13, SHIFT, 20}, },
			{{-1, ERROR, 15}, {16, SHIFT, 23}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 70}, },
			{{-1, ERROR, 18}, {7, SHIFT, 24}, },
			{{-1, ERROR, 19}, {13, SHIFT, 25}, {36, SHIFT, 26}, {37, SHIFT, 27}, },
			{{-1, ERROR, 20}, {2, SHIFT, 1}, {3, SHIFT, 2}, {7, SHIFT, 35}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 7}, {11, SHIFT, 19}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 24}, {14, SHIFT, 41}, },
			{{-1, ERROR, 25}, {13, SHIFT, 25}, {36, SHIFT, 26}, {37, SHIFT, 27}, },
			{{-1, REDUCE, 62}, {13, SHIFT, 43}, {33, SHIFT, 44}, },
			{{-1, REDUCE, 64}, },
			{{-1, ERROR, 28}, {12, SHIFT, 45}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 47}, {20, SHIFT, 46}, {21, SHIFT, 47}, {24, SHIFT, 48}, {25, SHIFT, 49}, {26, SHIFT, 50}, {27, SHIFT, 51}, {32, SHIFT, 52}, {34, SHIFT, 53}, },
			{{-1, REDUCE, 56}, {19, SHIFT, 54}, {22, SHIFT, 55}, {23, SHIFT, 56}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 16}, {36, REDUCE, 13}, },
			{{-1, ERROR, 36}, {36, SHIFT, 57}, },
			{{-1, ERROR, 37}, {14, SHIFT, 58}, },
			{{-1, REDUCE, 15}, {15, SHIFT, 59}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 72}, },
			{{-1, ERROR, 41}, {9, SHIFT, 60}, },
			{{-1, ERROR, 42}, {14, SHIFT, 62}, },
			{{-1, ERROR, 43}, {13, SHIFT, 25}, {36, SHIFT, 26}, {37, SHIFT, 27}, },
			{{-1, ERROR, 44}, {13, SHIFT, 25}, {36, SHIFT, 26}, {37, SHIFT, 27}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 46}, {13, SHIFT, 25}, {36, SHIFT, 67}, {37, SHIFT, 27}, },
			{{-1, ERROR, 47}, {13, SHIFT, 25}, {36, SHIFT, 67}, {37, SHIFT, 27}, },
			{{-1, ERROR, 48}, {13, SHIFT, 25}, {36, SHIFT, 67}, {37, SHIFT, 27}, },
			{{-1, ERROR, 49}, {13, SHIFT, 25}, {36, SHIFT, 67}, {37, SHIFT, 27}, },
			{{-1, ERROR, 50}, {13, SHIFT, 25}, {36, SHIFT, 67}, {37, SHIFT, 27}, },
			{{-1, ERROR, 51}, {13, SHIFT, 25}, {36, SHIFT, 67}, {37, SHIFT, 27}, },
			{{-1, ERROR, 52}, {13, SHIFT, 25}, {36, SHIFT, 67}, {37, SHIFT, 27}, },
			{{-1, ERROR, 53}, {13, SHIFT, 25}, {36, SHIFT, 67}, {37, SHIFT, 27}, },
			{{-1, ERROR, 54}, {13, SHIFT, 25}, {36, SHIFT, 67}, {37, SHIFT, 27}, },
			{{-1, ERROR, 55}, {13, SHIFT, 25}, {36, SHIFT, 67}, {37, SHIFT, 27}, },
			{{-1, ERROR, 56}, {13, SHIFT, 25}, {36, SHIFT, 67}, {37, SHIFT, 27}, },
			{{-1, REDUCE, 19}, {11, SHIFT, 79}, },
			{{-1, ERROR, 58}, {9, SHIFT, 60}, },
			{{-1, ERROR, 59}, {2, SHIFT, 1}, {3, SHIFT, 2}, {7, SHIFT, 3}, },
			{{-1, REDUCE, 34}, {2, SHIFT, 1}, {3, SHIFT, 2}, {7, SHIFT, 3}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 68}, },
			{{-1, ERROR, 64}, {14, SHIFT, 86}, },
			{{-1, REDUCE, 66}, {15, SHIFT, 87}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 62}, {13, SHIFT, 43}, },
			{{-1, REDUCE, 54}, {19, SHIFT, 54}, {22, SHIFT, 55}, {23, SHIFT, 56}, },
			{{-1, REDUCE, 55}, {19, SHIFT, 54}, {22, SHIFT, 55}, {23, SHIFT, 56}, },
			{{-1, REDUCE, 50}, {20, SHIFT, 46}, {21, SHIFT, 47}, },
			{{-1, REDUCE, 51}, {20, SHIFT, 46}, {21, SHIFT, 47}, },
			{{-1, REDUCE, 52}, {20, SHIFT, 46}, {21, SHIFT, 47}, },
			{{-1, REDUCE, 53}, {20, SHIFT, 46}, {21, SHIFT, 47}, },
			{{-1, REDUCE, 48}, {20, SHIFT, 46}, {21, SHIFT, 47}, },
			{{-1, REDUCE, 49}, {20, SHIFT, 46}, {21, SHIFT, 47}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 59}, },
			{{-1, ERROR, 79}, {12, SHIFT, 88}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 73}, },
			{{-1, ERROR, 83}, {36, SHIFT, 89}, },
			{{-1, ERROR, 84}, {4, SHIFT, 90}, {6, SHIFT, 91}, {8, SHIFT, 92}, {9, SHIFT, 60}, {10, SHIFT, 93}, {13, SHIFT, 25}, {16, SHIFT, 94}, {36, SHIFT, 26}, {37, SHIFT, 27}, },
			{{-1, REDUCE, 34}, {2, SHIFT, 1}, {3, SHIFT, 2}, {7, SHIFT, 3}, },
			{{-1, REDUCE, 65}, },
			{{-1, ERROR, 87}, {13, SHIFT, 25}, {36, SHIFT, 26}, {37, SHIFT, 27}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 6}, {11, SHIFT, 19}, },
			{{-1, ERROR, 90}, {13, SHIFT, 105}, },
			{{-1, ERROR, 91}, {13, SHIFT, 25}, {16, SHIFT, 106}, {36, SHIFT, 26}, {37, SHIFT, 27}, },
			{{-1, ERROR, 92}, {13, SHIFT, 108}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 101}, {16, SHIFT, 109}, },
			{{-1, REDUCE, 74}, },
			{{-1, ERROR, 103}, {4, SHIFT, 90}, {6, SHIFT, 91}, {8, SHIFT, 92}, {9, SHIFT, 60}, {10, SHIFT, 110}, {13, SHIFT, 25}, {16, SHIFT, 94}, {36, SHIFT, 26}, {37, SHIFT, 27}, },
			{{-1, REDUCE, 67}, },
			{{-1, ERROR, 105}, {13, SHIFT, 25}, {36, SHIFT, 67}, {37, SHIFT, 27}, },
			{{-1, REDUCE, 42}, },
			{{-1, ERROR, 107}, {16, SHIFT, 113}, },
			{{-1, ERROR, 108}, {13, SHIFT, 25}, {36, SHIFT, 67}, {37, SHIFT, 27}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 111}, {14, SHIFT, 115}, },
			{{-1, ERROR, 112}, {20, SHIFT, 46}, {21, SHIFT, 47}, {24, SHIFT, 48}, {25, SHIFT, 49}, {26, SHIFT, 50}, {27, SHIFT, 51}, {32, SHIFT, 52}, {34, SHIFT, 53}, },
			{{-1, REDUCE, 43}, },
			{{-1, ERROR, 114}, {14, SHIFT, 116}, },
			{{-1, ERROR, 115}, {4, SHIFT, 117}, {6, SHIFT, 91}, {8, SHIFT, 118}, {9, SHIFT, 60}, {13, SHIFT, 25}, {16, SHIFT, 94}, {36, SHIFT, 26}, {37, SHIFT, 27}, },
			{{-1, ERROR, 116}, {4, SHIFT, 90}, {6, SHIFT, 91}, {8, SHIFT, 92}, {9, SHIFT, 60}, {13, SHIFT, 25}, {16, SHIFT, 94}, {36, SHIFT, 26}, {37, SHIFT, 27}, },
			{{-1, ERROR, 117}, {13, SHIFT, 127}, },
			{{-1, ERROR, 118}, {13, SHIFT, 128}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 120}, {5, SHIFT, 129}, },
			{{-1, REDUCE, 21}, {5, REDUCE, 27}, },
			{{-1, REDUCE, 22}, {5, REDUCE, 28}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 25}, {5, REDUCE, 30}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 127}, {13, SHIFT, 25}, {36, SHIFT, 67}, {37, SHIFT, 27}, },
			{{-1, ERROR, 128}, {13, SHIFT, 25}, {36, SHIFT, 67}, {37, SHIFT, 27}, },
			{{-1, ERROR, 129}, {4, SHIFT, 90}, {6, SHIFT, 91}, {8, SHIFT, 92}, {9, SHIFT, 60}, {13, SHIFT, 25}, {16, SHIFT, 94}, {36, SHIFT, 26}, {37, SHIFT, 27}, },
			{{-1, ERROR, 130}, {14, SHIFT, 133}, },
			{{-1, ERROR, 131}, {14, SHIFT, 134}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 133}, {4, SHIFT, 117}, {6, SHIFT, 91}, {8, SHIFT, 118}, {9, SHIFT, 60}, {13, SHIFT, 25}, {16, SHIFT, 94}, {36, SHIFT, 26}, {37, SHIFT, 27}, },
			{{-1, ERROR, 134}, {4, SHIFT, 117}, {6, SHIFT, 91}, {8, SHIFT, 118}, {9, SHIFT, 60}, {13, SHIFT, 25}, {16, SHIFT, 94}, {36, SHIFT, 26}, {37, SHIFT, 27}, },
			{{-1, ERROR, 135}, {5, SHIFT, 137}, },
			{{-1, REDUCE, 41}, },
			{{-1, ERROR, 137}, {4, SHIFT, 117}, {6, SHIFT, 91}, {8, SHIFT, 118}, {9, SHIFT, 60}, {13, SHIFT, 25}, {16, SHIFT, 94}, {36, SHIFT, 26}, {37, SHIFT, 27}, },
			{{-1, REDUCE, 39}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 4}, },
			{{-1, 5}, {12, 16}, },
			{{-1, 6}, {12, 17}, },
			{{-1, 7}, {60, 82}, {85, 102}, },
			{{-1, 15}, },
			{{-1, 21}, {22, 40}, },
			{{-1, 8}, {20, 36}, {59, 36}, {60, 83}, {85, 83}, },
			{{-1, 9}, },
			{{-1, 10}, },
			{{-1, 11}, },
			{{-1, 37}, },
			{{-1, 38}, },
			{{-1, 39}, {59, 81}, },
			{{-1, 95}, {115, 119}, {116, 126}, {129, 132}, {133, 119}, {134, 126}, {137, 132}, },
			{{-1, 120}, {133, 135}, {134, 136}, {137, 138}, },
			{{-1, 96}, {115, 121}, {133, 121}, {134, 121}, {137, 121}, },
			{{-1, 84}, {85, 103}, },
			{{-1, 97}, },
			{{-1, 98}, {41, 61}, {58, 80}, {115, 122}, {133, 122}, {134, 122}, {137, 122}, },
			{{-1, 123}, },
			{{-1, 99}, },
			{{-1, 124}, },
			{{-1, 100}, {115, 125}, {133, 125}, {134, 125}, {137, 125}, },
			{{-1, 101}, {19, 28}, {25, 42}, {43, 63}, {44, 66}, {87, 104}, {91, 107}, },
			{{-1, 29}, },
			{{-1, 30}, {105, 111}, {108, 114}, {127, 130}, {128, 131}, },
			{{-1, 31}, {48, 70}, {49, 71}, {50, 72}, {51, 73}, {52, 74}, {53, 75}, {105, 112}, {108, 112}, {127, 112}, {128, 112}, },
			{{-1, 32}, {46, 68}, {47, 69}, },
			{{-1, 33}, {54, 76}, {55, 77}, {56, 78}, },
			{{-1, 34}, },
			{{-1, 64}, },
			{{-1, 65}, },
			{{-1, 12}, },
			{{-1, 22}, },
			{{-1, 85}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'string', 'int', 'void'",
			"expecting: 'main', id",
			"expecting: EOF",
			"expecting: '('",
			"expecting: '[', '(', ';'",
			"expecting: ';'",
			"expecting: 'void'",
			"expecting: '(', id, num",
			"expecting: '[', ';'",
			"expecting: 'string', 'int', 'if', 'return', 'void', 'while', '{', '}', '(', ';', id, num",
			"expecting: ')'",
			"expecting: ']', '(', ')', ',', ';', '/', '+', '-', '*', '%', '>', '<', '>=', '<=', '!=', '=', '=='",
			"expecting: ']', ')', ',', ';', '/', '+', '-', '*', '%', '>', '<', '>=', '<=', '!=', '=='",
			"expecting: ']'",
			"expecting: ']', ')', ',', ';'",
			"expecting: ']', ')', ',', ';', '+', '-', '>', '<', '>=', '<=', '!=', '=='",
			"expecting: ')', id",
			"expecting: id",
			"expecting: ')', ','",
			"expecting: '{'",
			"expecting: '[', ')', ','",
			"expecting: ']', '(', ')', ',', ';', '/', '+', '-', '*', '%', '>', '<', '>=', '<=', '!=', '=='",
			"expecting: ']', ')', ',', ';', '+', '-'",
			"expecting: 'if', 'return', 'while', '{', '}', '(', ';', id, num",
			"expecting: '(', ';', id, num",
			"expecting: 'string', 'int', 'if', 'else', 'return', 'void', 'while', '{', '}', '(', ';', id, num, EOF",
			"expecting: 'if', 'else', 'return', 'while', '{', '}', '(', ';', id, num",
			"expecting: '+', '-', '>', '<', '>=', '<=', '!=', '=='",
			"expecting: 'if', 'return', 'while', '{', '(', ';', id, num",
			"expecting: 'else'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 1, 1, 2, 2, 0, 0, 1, 1, 1, 0, 0, 3, 4, 5, 2, 0, 6, 7, 0, 8, 8, 9, 10, 7, 11, 12, 13, 14, 14, 15, 12, 12, 12, 16, 17, 10, 18, 18, 8, 19, 10, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 20, 19, 0, 9, 2, 12, 18, 10, 18, 14, 21, 12, 12, 22, 22, 22, 22, 22, 22, 12, 12, 12, 13, 0, 18, 9, 17, 23, 9, 12, 7, 18, 8, 3, 24, 3, 25, 26, 23, 23, 23, 23, 23, 23, 5, 9, 23, 18, 7, 26, 5, 7, 26, 25, 10, 27, 26, 10, 28, 28, 3, 3, 23, 29, 26, 26, 29, 29, 26, 23, 7, 7, 28, 10, 10, 23, 28, 28, 29, 29, 28, 29, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
